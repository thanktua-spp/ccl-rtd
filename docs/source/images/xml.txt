This XML file does not appear to have any style information associated with it. The document tree is shown below.
<doc>
<assembly>
<name>CypherCrescent.MathematicsLibrary</name>
</assembly>
<members>
<member name="P:CypherCrescent.MathematicsLibrary.ColVec.T">
<summary> </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.#ctor(System.Double[])">
<summary> </summary>
<param name="entry"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
<summary> </summary>
<param name="entry"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.#ctor(System.Collections.Generic.List{System.Double})">
<summary> </summary>
<param name="entry"/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.ColVec.Item(System.Int32)">
<summary> </summary>
<param name="i"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.ColVec.Item(CypherCrescent.MathematicsLibrary.Indexer)">
<summary> </summary>
<param name="I"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Implicit(System.Double[])~CypherCrescent.MathematicsLibrary.ColVec">
<summary> </summary>
<param name="entry"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Implicit(System.Collections.Generic.List{System.Double})~CypherCrescent.MathematicsLibrary.ColVec">
<summary> </summary>
<param name="entry"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Implicit(System.Collections.Generic.List{CypherCrescent.MathematicsLibrary.ColVec})~CypherCrescent.MathematicsLibrary.ColVec">
<summary> </summary>
<param name="entry"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Implicit(CypherCrescent.MathematicsLibrary.ColVec[])~CypherCrescent.MathematicsLibrary.ColVec">
<summary> </summary>
<param name="entry"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Implicit(System.Collections.Generic.List{CypherCrescent.MathematicsLibrary.Matrix})~CypherCrescent.MathematicsLibrary.ColVec">
<summary> </summary>
<param name="entry"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Implicit(System.Double)~CypherCrescent.MathematicsLibrary.ColVec">
<summary> </summary>
<param name="mat"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.Duplicate">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.ArrayEval(System.Func{System.Double,System.Double})">
<summary> Array Evaluator </summary>
<param name="fun"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.Max(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Matrix of the maximum elements comparing matrix A and B </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.Min(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Matrix of the minimum elements comparing matrix A and B </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.Prod">
<summary> product of colvec instance. </summary>
<returns>double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.Min(System.Int32@)">
<summary> Minimum value from colvec instance. </summary>
<param name="IndexOfMin">Index of Maximum element</param>
<returns>double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.Max(System.Int32@)">
<summary> Minimum value from colvec instance. </summary>
<param name="IndexOfMax">Index of Maximum element</param>
<returns>double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.Vcart(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Vertical Concartination of Matrix A and B </summary>
<param name="A">Matrix</param>
<param name="B">Matrix</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.Hcart(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Vertical Concartination of Matrix A and B </summary>
<param name="A">Matrix</param>
<param name="B">Matrix</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.Vcart(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec[])">
<summary> Vertical Concartination of Matrix A and B </summary>
<param name="A">Matrix</param>
<param name="B">Matrix</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.Hcart(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec[])">
<summary> Vertical Concartination of Matrix A and B </summary>
<param name="A">Matrix</param>
<param name="B">Matrix</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.Var(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Variance of Matix A. </summary>
<param name="A">Matrix A</param>
<returns>double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.Linspace(System.Double,System.Double,System.Int32)">
<summary> Creates N linearly spaces numbers between a and b </summary>
<param name="a">double a</param>
<param name="b">double b</param>
<param name="N">integer N</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.Logspace(System.Double,System.Double,System.Int32)">
<summary> Creates N logarithmically spaces numbers between 10^a and 10^b </summary>
<param name="a">double a</param>
<param name="b">double b</param>
<param name="N">integer N</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.Repmat(System.Double,System.Int32)">
<summary> </summary>
<param name="a"/>
<param name="N"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.Interp1(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> One dimensional linear Interpolation </summary>
<param name="X"/>
<param name="Y"/>
<param name="x"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.Interp1(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> One dimensional linear Interpolation </summary>
<param name="X"/>
<param name="Y"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.LangInterp1(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> One dimensional langrange Interpolation </summary>
<param name="X"/>
<param name="Y"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.LangInterp1(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> One dimensional langrange Interpolation </summary>
<param name="X"/>
<param name="Y"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.CubicInterp1(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> One dimensional cubic Interpolation given the dydx </summary>
<param name="X"/>
<param name="Y"/>
<param name="dydx"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.CubicInterp1(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> One dimensional cubic Interpolation given the slope dydx </summary>
<param name="X"/>
<param name="Y"/>
<param name="dydx"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.MultTW(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.MultTW(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec[])">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<param name="Vectors"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.DivTW(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.Ones(System.Int32)">
<summary> </summary>
<param name="N"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.Zeros(System.Int32)">
<summary> </summary>
<param name="N"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.PowTW(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Multiply(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Division(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix)">
<summary> </summary>
<param name="b"/>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_UnaryNegation(CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Subtraction(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Subtraction(CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="b"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Subtraction(System.Double,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="b"/>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Addition(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Addition(CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="b"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Addition(System.Double,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="b"/>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Multiply(CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="b"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Multiply(System.Double,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="b"/>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Multiply(CypherCrescent.MathematicsLibrary.ColVec,System.Boolean[])">
<summary> </summary>
<param name="A"/>
<param name="b"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Multiply(System.Boolean[],CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="b"/>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Division(CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="b"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Division(System.Double,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="b"/>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Equality(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Inequality(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_GreaterThan(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_GreaterThanOrEqual(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_LessThanOrEqual(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_LessThan(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Equality(System.Double,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Equality(CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Inequality(System.Double,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_Inequality(CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_GreaterThan(CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_GreaterThan(System.Double,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="B"/>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_LessThan(CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_LessThan(System.Double,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="B"/>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_GreaterThanOrEqual(CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_GreaterThanOrEqual(System.Double,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="B"/>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_LessThanOrEqual(CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.ColVec.op_LessThanOrEqual(System.Double,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="B"/>
<param name="A"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Complex.Real">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Complex.Imaginary">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Complex.Magnitude">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Complex.MagnitudeSq">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Complex.Argument">
<summary> </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.#ctor(System.Double,System.Double)">
<summary> Constructor </summary>
<param name="real"/>
<param name="imaginary"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.#ctor(System.Double)">
<summary> Constructor </summary>
<param name="real"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.op_Implicit(System.Double)~CypherCrescent.MathematicsLibrary.Complex">
<summary> Implicit operator for conversion from double to complex </summary>
<param name="value"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.CompareTo(CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="other"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.Max(CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.Min(CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.ToString">
<summary> Converts a Complex number to String for printing </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.ToStringforArray">
<summary> Converts a Complex number to String for printing </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.Abs(CypherCrescent.MathematicsLibrary.Complex)">
<summary> COmputes the Magnitude of a Complex number </summary>
<param name="C"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.Unit(CypherCrescent.MathematicsLibrary.Complex)">
<summary> COmputes the Unit Complex number of the same argument as a given Complex number </summary>
<param name="C"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.Arg(CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="c"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.Cart(System.Double,System.Double)">
<summary> </summary>
<param name="abs"/>
<param name="angle"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.op_Addition(CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="c1"/>
<param name="c2"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.op_Addition(CypherCrescent.MathematicsLibrary.Complex,System.Double)">
<summary> </summary>
<param name="c1"/>
<param name="d"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.op_Addition(System.Double,CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="d"/>
<param name="c"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.op_UnaryNegation(CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="c"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.op_Subtraction(CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="c1"/>
<param name="c2"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.op_Subtraction(CypherCrescent.MathematicsLibrary.Complex,System.Double)">
<summary> </summary>
<param name="c"/>
<param name="d"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.op_Subtraction(System.Double,CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="d"/>
<param name="c"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.op_Multiply(CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="c1"/>
<param name="c2"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.op_Multiply(System.Double,CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="d"/>
<param name="c1"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.op_Multiply(CypherCrescent.MathematicsLibrary.Complex,System.Double)">
<summary> </summary>
<param name="c"/>
<param name="d"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.op_Division(CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="c1"/>
<param name="c2"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.op_Division(System.Double,CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="d"/>
<param name="c"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.op_Division(CypherCrescent.MathematicsLibrary.Complex,System.Double)">
<summary> </summary>
<param name="c1"/>
<param name="d"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.op_OnesComplement(CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="c1"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.op_ExclusiveOr(CypherCrescent.MathematicsLibrary.Complex,System.Double)">
<summary> </summary>
<param name="c1"/>
<param name="N"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.op_ExclusiveOr(System.Double,CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="N"/>
<param name="c1"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Complex.op_ExclusiveOr(CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="c1"/>
<param name="c2"/>
<returns/>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.CException">
<summary> Exception from the Complex Class </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.CException.#ctor(System.String)">
<summary> Exception from the Matrix Class </summary>
<param name="Message">Message to be displayed</param>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.EigenPack.tred2(System.Double[0:,0:],System.Double[]@,System.Double[]@,System.Double[0:,0:]@)">
<summary> This procedure reduces the given lower triangle of a symmetric matrix, A, stored in the array a[1:n,1:n], to tridiagonal form using Householder's reduction. The diagonal of the result is stored in the array d[1:n] and the sub-diagonal in the last n-1 stores of the array e[1:n] (with the additional element e[1]=O). The transformation matrices are accumulated in the array z[1:n,1:n]. The array a is left unaltered begin unless the actual parameters corresponding to a and z are identical </summary>
<param name="a">Input matrix</param>
<param name="d">diagonal entries</param>
<param name="e">Subdiagonal entries</param>
<param name="z">Trasformation matrix</param>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.EigenPack.tql1(System.Double[0:,0:])">
<summary> This procedure finds the eigenvalues of a tridiagonal matrix, T, given with its diagonal elements in the array d[1:n] and its subdiagonal elements in the last n-1 stores of the array e[1:n], using QL transformations. The eigenvalues are overwritten on the diagonal elements in the array d in ascending order. The procedure will fail if any one eigenvalue takes more than 30 iterations; </summary>
<param name="a">Input Matrix</param>
<returns>eigenvalues of symmetric matrix A</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.EigenPack.tql2(System.Double[0:,0:],System.Double[0:,0:]@)">
<summary> Finds the eigenvalues and eigenvectors of ZTZ', the tridiagonal matrix T given with its diagonal elements in the array d[1:n] and its sub-diagonal elements in the last n-1 stores of the array e[1:n], using QL transformations. The eigenvalues are overwritten on the diagonal elements in the array d in ascending order. The eigenvectors are formed in the array z[1:n,1:n], overwriting the supplied orthogonal transformation matrix Z. The procedure will fail if any one eigenvalue takes more than 30 iterations; </summary>
<param name="a">symmetric matrix</param>
<param name="z">Eigenvectors</param>
<returns>Eigenvalues and vectors of a symmetric matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.EigenPack.imtql1(System.Double[0:,0:])">
<summary> Implicit tridiagonal QL algorithm to obtain eigenvalues of symmetric matrices </summary>
<param name="a">Symmetric square matrix</param>
<returns>all eigenvalues of "a"</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.EigenPack.imtql2(System.Double[0:,0:],System.Double[0:,0:]@)">
<summary> Implicit tridiagonal QL algorithm to obtain eigenvalues and eigenvectors of symmetric matrices </summary>
<param name="a">Symmetric square matrix</param>
<returns>all eigenvalues and eigenvectors of "a"</returns>
</member>
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.EigenPack.eigen(System.Double[0:,0:]@,System.Double[0:,0:]@)"  -->
<member name="M:CypherCrescent.MathematicsLibrary.EigenPack.balance(System.Double[0:,0:],System.Int32@,System.Int32@,System.Double[]@)">
<summary> reduce the norm of a [1:n,1:n] by exact diagonal similarity transformations stored in d[1:n]; </summary>
<param name="a"> input matrix</param>
<param name="low"/>
<param name="hi"/>
<param name="d"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.EigenPack.balbak(System.Double[0:,0:],System.Double[0:,0:])">
<summary> Backward transformation of a set of right-hand eigenvectors of a balanced matrix into the eigenvectors of the original matrix from which the balanced matrix was derived by a call of procedure balance; </summary>
<param name="a">Input matrix</param>
<param name="z">Eigenvectors of balanced matrix</param>
<returns>Eigenvectors of original matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.EigenPack.elmhes(System.Double[0:,0:],System.Double[]@,System.Int32@,System.Int32@)">
<summary> Given the unsymmetric matrix, A, stored in the array a[1:n,1:n], this procedure reduces the sub-matrix of order I - k + 1, which starts at the element a[k, k] and finishes at the element a[l, I], to Hessenberg form, H, by non-orthogonal elementary transformations. The matrix H is overwritten on A with details of the transformations. stored in the remaining triangle under H and in the array int[k:l]; </summary>
<param name="a">Unsymmetric matrix</param>
<param name="Intt">output interger array</param>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.EigenPack.elmbak(System.Double[0:,0:],System.Double[0:,0:])">
<summary> Given r eigenvectors, stored as columns in the array z[1:n,1:r], of the Hessenberg matrix, H, which was formed by elmhes, and details of the transformations as left by elmhes below Hand in the array int[k:l], this procedure forms the eigenvectors of the matrix A and overwrites them on the given vectors </summary>
<param name="a">Input matrix</param>
<param name="z">eigenvectors of hessenberg</param>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.EigenPack.comhes(System.Double[0:,0:],System.Double[0:,0:],System.Double[0:,0:]@,System.Double[]@,System.Int32@,System.Int32@)">
<summary> Given the complex unsymmetric matrix, A, stored in the arrays ar[1:n,1:n] and ai[1:n,1:n], this procedure reduces the sub-matrix of order l-k+1, which starts at the elements ar[k, k] and ai[k, k] and finishes at the elements ar[l,l] and ai[l,l], to Hessenberg form, H, by non-orthogonal elementary transformations. The matrix H is overwritten on A with details of the transformations stored in the remaining triangle under H and in the array int[k:l]. </summary>
<param name="ar"/>
<param name="ai"/>
<param name="aiout"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.EigenPack.comlr(System.Double[0:,0:],System.Double[0:,0:],System.Double[]@,System.Double[]@)">
<summary> Finds the eigenvalues of a complex upper Hessenberg matrix, H, stored in the arrays hr[1:n,1:n] and hi[1:n,1:n], and stores the real parts in the array wr[1:n] and the complex parts in the array wi[1:n]. macheps is the relative machine precision. The procedure fails if any eigenvalue takes more than 30 iterations. The procedures cdiv and csqrt are used </summary>
<returns>eigenvalues of complex matrices</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.EigenPack.comlr2(System.Double[0:,0:],System.Double[0:,0:],System.Double[]@,System.Double[]@,System.Double[0:,0:]@,System.Double[0:,0:]@)">
<summary> Finds the eigenvalues and eigenvectors of a complex matrix which has been reduced by procedure comhes to upper Hessenberg form, H, stored in the arrays hr [1: n, 1: n] and hi [1:n, 1 :n]. The real and imaginary parts of the eigenvalues are formed in the arrays wr[1 : n] and wi[1: n] respectively and the unnormalised eigenvectors are formed as columns of the arrays vr[1:n, 1:n] and vi[1:n, 1:n]. low and upp are two integers produced in balancing where eigenvalues are isolated in positions 1 to low - 1 and upp + 1 to n. If balancing is not used, low = 1, upp = n. macheps is the relative machine precision. The procedure fails if any eigenvalue takes more than 30 iterations. The procedures cdiv and csqrt are used. </summary>
<param name="ar">real part of complex matrix</param>
<param name="ai">imaginary part of complex matrix</param>
<param name="wi">imaginary part of eigenvalues</param>
<param name="vr">real part of eigenvectors</param>
<param name="vi">imaginary part of eigenvectors</param>
<returns>complete eigensystem of a matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.EigenPack.comeig(System.Double[0:,0:],System.Double[0:,0:],System.Double[]@,System.Double[]@,System.Double[0:,0:]@,System.Double[0:,0:]@)">
<summary> solves the eigenproblem for the complex matrix a +iz = C (a[1:n,1:n], z [1:n,1:n]) by finding a sequence of similarity transformations such that inv(W)*C*W is approximately diagonal. Arrays t[1:n,1:n] and u[1:n 1:n] must be provided to receive the eigenvectors W = t + iu. The maximum number of iterations, or sweeps,is limited to 35. A machine dependent variable eps is set to 10-14 within the program. This variable should be changed appropriately when the program is used; Algorithm is suitable for real matrices expected to have complex eigensystem </summary>
<param name="a">real part of A</param>
<param name="z">imaginary part of A</param>
<param name="wi">imaginary part of eigenvalues</param>
<param name="t">real part of eigenvectors</param>
<param name="u">imaginary part of eigenvectors</param>
<returns>complete eigensolution of a matrix expected to have a complex results</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.EigenPack.orthes(System.Double[0:,0:],System.Double[]@)">
<summary> Given the unsymmetric matrix, A, stored in the array a[1:n,1:n], this procedure reduces the sub-matrix of order l-k+1, which starts at the element a[k, k] and finishes at the element a[l,l], to Hessenberg form, H, by orthogonal transformations. The matrix H is overwritten on A with details of the transformations stored in the remaining tri angle under H and in the array d[k:1]. tol is a tolerance for checking if the transformation is valid; </summary>
<param name="a"/>
<param name="d"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.EigenPack.ortrans(System.Double[0:,0:])">
<summary> form the matrix of accumulated transformations in the array v[1:n,1:n] from the information left by proeedure orthes below the upper Hessenberg matrix, H, in the array h[1:n,1:n] and in the array d [1:n]. The contents of the latter are destroyed; </summary>
<param name="a">Input matrix</param>
<returns>Similarity transformation matrix from Hessenberg reduction</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.EigenPack.elmtrans(System.Double[0:,0:])">
<summary> form the matrix of accumulated transformations in the array v[1:n,1:n] from the information left by procedure elmhes below the upper Hessenberg matrix, H, in the array h[1:n,1:n] and in the integer array int[1:n] ; </summary>
<param name="a">Input matrix</param>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.EigenPack.hqr(System.Double[0:,0:],System.Double[]@,System.Double[]@,System.Double[]@)">
<summary> Finds the eigenvalues (using Francis QR) of a real upper Hessenberg matrix, H, stored in the array h[1:n,1:n], and stores the real parts in the arra y wr[1:n] and the imaginary parts in the array wi[1:n]. macheps is the relative machine precision. The procedure fails if any eigenvalue takes more than 30 iterations </summary>
<param name="a"/>
<param name="wi"/>
<param name="cnt"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.EigenPack.hqr2(System.Double[0:,0:],System.Double[]@,System.Double[]@,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[]@)">
<summary> Finds the eigenvalues and eigenvectors of a real matrix which has been reduced to upper Hessenberg form in the array h[1:n,1:n] with the accumulated transformations stored in the array vecs[1:n,1:n]. The real and imaginary parts of the eigenvalues are formed in the arrays wr, wi[1:n] and the eigenvectors are formed in the array vecs[1:n,1:n] where only one complex vector, corresponding to the root with positive imaginary part, is formed for a complex pair. low and upp are two integers produced in balancing where eigenvalues are isolated in positions 1 to low-1 and upp+1 to n. If balancing is not used low = 1, upp = n. macheps is the relative machine precision. The procedure fails if any eigenvalue takes more than 30 iterations. </summary>
<param name="a"/>
<param name="wi"/>
<param name="vec"/>
<param name="h"/>
<param name="intt"/>
<returns/>
</member>
<member name="F:CypherCrescent.MathematicsLibrary.Indexer.indexer">
<summary> Returns the Number of Elements in an Indexer </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Indexer.Numel">
<summary> Returns the Number of elements in an Indexer </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.#ctor(System.Int32)">
<summary> </summary>
<param name="Num"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.#ctor(CypherCrescent.MathematicsLibrary.Indexer)">
<summary> </summary>
<param name="Num"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.#ctor(System.Int32,System.Int32)">
<summary> </summary>
<param name="start"/>
<param name="end"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.#ctor(System.Int32,System.Int32,System.Int32)">
<summary> </summary>
<param name="start"/>
<param name="step"/>
<param name="end"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.#ctor(System.Int32[])">
<summary> </summary>
<param name="indxer"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.#ctor(System.Collections.Generic.List{System.Int32})">
<summary> </summary>
<param name="indxer"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.#ctor(System.Boolean[])">
<summary> </summary>
<param name="Logicals"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.#ctor(System.Boolean[0:,0:])">
<summary> </summary>
<param name="Logicals"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.ToString">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_Implicit(System.Int32)~CypherCrescent.MathematicsLibrary.Indexer">
<summary> </summary>
<param name="value"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_Implicit(System.Int32[])~CypherCrescent.MathematicsLibrary.Indexer">
<summary> </summary>
<param name="value"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_Implicit(System.Collections.Generic.List{System.Int32})~CypherCrescent.MathematicsLibrary.Indexer">
<summary> </summary>
<param name="value"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_Implicit(System.Boolean[])~CypherCrescent.MathematicsLibrary.Indexer">
<summary> </summary>
<param name="value"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_Implicit(System.Boolean[0:,0:])~CypherCrescent.MathematicsLibrary.Indexer">
<summary> </summary>
<param name="value"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.GetEnumerator">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.System#Collections#IEnumerable#GetEnumerator">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.Min(System.Int32@)">
<summary> Minimum value from indexer instance. </summary>
<param name="IndexOfMin">Index of Maximum element</param>
<returns>int</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.Min">
<summary> Minimum value from indexer instance. </summary>
<returns>int</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.Max(System.Int32@)">
<summary> Maximum value from indexer instance. </summary>
<param name="IndexOfMax">Index of Maximum element</param>
<returns>int</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.Max">
<summary> Maximum value from indexer instance. </summary>
<returns>int</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.Add(System.Int32)">
<summary> </summary>
<param name="i"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.Add(CypherCrescent.MathematicsLibrary.Indexer)">
<summary> </summary>
<param name="indx"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.RemoveAt(System.Int32)">
<summary> </summary>
<param name="i"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.Remove(System.Int32)">
<summary> </summary>
<param name="i"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.Insert(System.Int32,System.Int32)">
<summary> </summary>
<param name="i"/>
<param name="v"/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Indexer.Item(System.Int32)">
<summary> </summary>
<param name="i"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Indexer.Item(CypherCrescent.MathematicsLibrary.Indexer)">
<summary> </summary>
<param name="indx"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_Addition(CypherCrescent.MathematicsLibrary.Indexer,CypherCrescent.MathematicsLibrary.Indexer)">
<summary> </summary>
<param name="indx1"/>
<param name="indx2"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_Addition(System.Int32,CypherCrescent.MathematicsLibrary.Indexer)">
<summary> </summary>
<param name="i"/>
<param name="indx2"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_Addition(CypherCrescent.MathematicsLibrary.Indexer,System.Int32)">
<summary> </summary>
<param name="indx1"/>
<param name="i"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_Subtraction(System.Int32,CypherCrescent.MathematicsLibrary.Indexer)">
<summary> </summary>
<param name="i"/>
<param name="indx2"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_Subtraction(CypherCrescent.MathematicsLibrary.Indexer,System.Int32)">
<summary> </summary>
<param name="indx1"/>
<param name="i"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_Multiply(System.Int32,CypherCrescent.MathematicsLibrary.Indexer)">
<summary> </summary>
<param name="i"/>
<param name="indx2"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_Multiply(CypherCrescent.MathematicsLibrary.Indexer,System.Int32)">
<summary> </summary>
<param name="indx1"/>
<param name="i"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_Division(System.Int32,CypherCrescent.MathematicsLibrary.Indexer)">
<summary> </summary>
<param name="i"/>
<param name="indx2"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_Division(CypherCrescent.MathematicsLibrary.Indexer,System.Int32)">
<summary> </summary>
<param name="indx1"/>
<param name="i"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_Subtraction(CypherCrescent.MathematicsLibrary.Indexer,CypherCrescent.MathematicsLibrary.Indexer)">
<summary> </summary>
<param name="indx1"/>
<param name="indx2"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_Multiply(CypherCrescent.MathematicsLibrary.Indexer,CypherCrescent.MathematicsLibrary.Indexer)">
<summary> </summary>
<param name="indx1"/>
<param name="indx2"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_Division(CypherCrescent.MathematicsLibrary.Indexer,CypherCrescent.MathematicsLibrary.Indexer)">
<summary> </summary>
<param name="indx1"/>
<param name="indx2"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_BitwiseAnd(CypherCrescent.MathematicsLibrary.Indexer,CypherCrescent.MathematicsLibrary.Indexer)">
<summary> </summary>
<param name="indx1"/>
<param name="indx2"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Indexer.op_BitwiseOr(CypherCrescent.MathematicsLibrary.Indexer,CypherCrescent.MathematicsLibrary.Indexer)">
<summary> </summary>
<param name="indx1"/>
<param name="indx2"/>
<returns/>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Integrators">
<summary> Performs numerical integration of functions </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.Trapz(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Performs numerical integration using Trapezoidal method </summary>
<param name="X">Matrix of x values</param>
<param name="Y">Matrix of function values</param>
<returns>Integration of y over x</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.CumTrapz(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Performs cummulative integratio of y over x </summary>
<param name="X">values of x</param>
<param name="Y">values of y</param>
<returns>Matrix of cummulative integration</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.Trapz(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
<summary> Performs numerical interation of a function using trapezoidal method </summary>
<param name="fun">Function to be integrated</param>
<param name="x1">Lowerbound of the integration scheme</param>
<param name="x2">Upperbound of the integration scheme</param>
<returns>Value of the integration</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.Trapz(System.Func{CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex},CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex,System.Double)">
<summary> Performs numerical interation of a complex function using trapezoidal method </summary>
<param name="fun">Function to be integrated</param>
<param name="x1">Lowerbound of the integration scheme</param>
<param name="x2">Upperbound of the integration scheme</param>
<returns>Value of the integration</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.Simps(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Performs numerical integration using Simpson's method </summary>
<param name="X">Matrix of x values</param>
<param name="Y">Matrix of function values</param>
<returns>Integration of y over x</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.Simps(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
<summary> Performs numerical interation of a function using Simpson's method </summary>
<param name="fun">Function to be integrated</param>
<param name="x1">Lowerbound of the integration scheme</param>
<param name="x2">Upperbound of the integration scheme</param>
<returns>Value of the integration</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.Simps(System.Func{CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex},CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex,System.Double)">
<summary> Performs numerical interation of a complex function using Simpson's method </summary>
<param name="fun">Function to be integrated</param>
<param name="x1">Lowerbound of the integration scheme</param>
<param name="x2">Upperbound of the integration scheme</param>
<returns>Value of the integration</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.Simps38(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Performs numerical integration using Simpson's 3-8 method </summary>
<param name="X">Matrix of x values</param>
<param name="Y">Matrix of function values</param>
<returns>Integration of y over x</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.Simps38(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
<summary> Performs numerical interation of a function using Simpson's 3-8 method </summary>
<param name="fun">Function to be integrated</param>
<param name="x1">Lowerbound of the integration scheme</param>
<param name="x2">Upperbound of the integration scheme</param>
<returns>Value of the integration</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.Simps38(System.Func{CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex},CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex,System.Double)">
<summary> Performs numerical interation of a complex function using Simpson's 3-8 method </summary>
<param name="fun">Function to be integrated</param>
<param name="x1">Lowerbound of the integration scheme</param>
<param name="x2">Upperbound of the integration scheme</param>
<returns>Value of the integration</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.GaussLeg(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
<summary> Ingerates a function using the Gauss Legendre method </summary>
<param name="fun">Function to be integrated</param>
<param name="x1">Lowe bound of the integration</param>
<param name="x2">upper bound of the integration</param>
<param name="eps">Tolerance used to determine the number of required terms</param>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.GaussLeg2(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Double)">
<summary> </summary>
<param name="fun"/>
<param name="x1"/>
<param name="x2"/>
<param name="y1"/>
<param name="y2"/>
<param name="eps"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.GaussLeg2(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Func{System.Double,System.Double},System.Double,System.Double)">
<summary> </summary>
<param name="fun"/>
<param name="x1"/>
<param name="x2"/>
<param name="funy1"/>
<param name="y2"/>
<param name="eps"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.GaussLeg2(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Func{System.Double,System.Double},System.Double)">
<summary> </summary>
<param name="fun"/>
<param name="x1"/>
<param name="x2"/>
<param name="y1"/>
<param name="funy2"/>
<param name="eps"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.GaussLeg2(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double)">
<summary> </summary>
<param name="fun"/>
<param name="x1"/>
<param name="x2"/>
<param name="funy1"/>
<param name="funy2"/>
<param name="eps"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.GaussLeg3(System.Func{System.Double,System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
<summary> </summary>
<param name="fun"/>
<param name="x1"/>
<param name="x2"/>
<param name="y1"/>
<param name="y2"/>
<param name="z1"/>
<param name="z2"/>
<param name="eps"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.GaussLeg3(System.Func{System.Double,System.Double,System.Double,System.Double},System.Double,System.Double,System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Double)">
<summary> </summary>
<param name="fun"/>
<param name="x1"/>
<param name="x2"/>
<param name="funy1"/>
<param name="y2"/>
<param name="z1"/>
<param name="z2"/>
<param name="eps"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.GaussLeg3(System.Func{System.Double,System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
<summary> </summary>
<param name="fun"/>
<param name="x1"/>
<param name="x2"/>
<param name="y1"/>
<param name="funy2"/>
<param name="z1"/>
<param name="z2"/>
<param name="eps"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.GaussLeg3(System.Func{System.Double,System.Double,System.Double,System.Double},System.Double,System.Double,System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
<summary> </summary>
<param name="fun"/>
<param name="x1"/>
<param name="x2"/>
<param name="funy1"/>
<param name="funy2"/>
<param name="z1"/>
<param name="z2"/>
<param name="eps"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.GaussLeg3(System.Func{System.Double,System.Double,System.Double,System.Double},System.Double,System.Double,System.Func{System.Double,System.Double},System.Double,System.Func{System.Double,System.Double,System.Double},System.Double,System.Double)">
<summary> </summary>
<param name="fun"/>
<param name="x1"/>
<param name="x2"/>
<param name="funy1"/>
<param name="y2"/>
<param name="funz1"/>
<param name="z2"/>
<param name="eps"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.GaussLeg3(System.Func{System.Double,System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Func{System.Double,System.Double},System.Double,System.Func{System.Double,System.Double,System.Double},System.Double)">
<summary> </summary>
<param name="fun"/>
<param name="x1"/>
<param name="x2"/>
<param name="y1"/>
<param name="funy2"/>
<param name="z1"/>
<param name="funz2"/>
<param name="eps"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.GaussLeg3(System.Func{System.Double,System.Double,System.Double,System.Double},System.Double,System.Double,System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Func{System.Double,System.Double,System.Double},System.Func{System.Double,System.Double,System.Double},System.Double)">
<summary> </summary>
<param name="fun"/>
<param name="x1"/>
<param name="x2"/>
<param name="funy1"/>
<param name="funy2"/>
<param name="funz1"/>
<param name="funz2"/>
<param name="eps"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.GaussLag(System.Func{System.Double,System.Double},System.Double,System.Double)">
<summary> Integration via Gause Laguerre method </summary>
<param name="fun">function to be integrated</param>
<param name="eps">tolerance used to determine the number of termes needed</param>
<returns>value of the integration</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.GaussHer(System.Func{System.Double,System.Double},System.Double)">
<summary> Integration via Gause Hermite method </summary>
<param name="fun">function to be integrated</param>
<param name="eps">tolerance used to determine the number of termes needed</param>
<returns>value of the integration</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.GaussChebf(System.Func{System.Double,System.Double},System.Double)">
<summary> Ingerates a function using the Gauss Chebyshev method </summary>
<param name="fun">Function to be integrated</param>
<param name="eps">Tolerance used to determine the number of required terms</param>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.GaussChebg(System.Func{System.Double,System.Double},System.Double)">
<summary> Ingerates a function using the Gauss Chebyshev method </summary>
<param name="fun">Function to be integrated</param>
<param name="eps">Tolerance used to determine the number of required terms</param>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.midpoint2D(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Int32)">
<summary> Numerical Integration in 2 dimensions using Trapezoidal Rule </summary>
<param name="X"/>
<param name="Y"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.midpoint2D(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Int32)">
<summary> Numerical Integration in 2 dimensions using Trapezoidal Rule </summary>
<param name="X"/>
<param name="Y"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.gaussleg2D(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Int32)">
<summary> </summary>
<param name="fun"/>
<param name="x1"/>
<param name="x2"/>
<param name="funy1"/>
<param name="funy2"/>
<param name="N"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Integrators.gaussleg3D(System.Func{System.Double,System.Double,System.Double,System.Double},System.Double,System.Double,System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Func{System.Double,System.Double,System.Double},System.Func{System.Double,System.Double,System.Double},System.Int32)">
<summary> Numerical Integration in 3 dimensions using gauss legendre quadrature </summary>
<param name="fun"/>
<param name="x1"/>
<param name="x2"/>
<param name="y1"/>
<param name="y2"/>
<param name="z1"/>
<param name="z2"/>
<param name="N"/>
<returns/>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Intersect">
<summary> </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Intersect.Intesection(System.Double[],System.Double[],System.Double[],System.Double[])">
<summary> </summary>
<param name="X1"/>
<param name="Y1"/>
<param name="X2"/>
<param name="Y2"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Intersect.Intesect1(System.Double[],System.Double[],System.Double[],System.Double[])">
<summary> </summary>
<param name="X1"/>
<param name="Y1"/>
<param name="X2"/>
<param name="Y2"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Intersect.IntesectAll(System.Double[],System.Double[],System.Double[],System.Double[])">
<summary> </summary>
<param name="X1"/>
<param name="Y1"/>
<param name="X2"/>
<param name="Y2"/>
<returns/>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.IntesectException">
<summary> Exception from the Matrix Class </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.IntesectException.#ctor(System.String)">
<summary> Exception from the Intesect Class </summary>
<param name="Message">Message to be displayed</param>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Maths.Num2Str(System.Double)">
<summary> </summary>
<param name="num"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Maths.Abs(System.Int32)">
<summary> </summary>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Maths.Find(System.Boolean[0:,0:],System.Int32)">
<summary> Find base 0 indices of members of a matrix that meet a condition </summary>
<param name="A">2D array of bool generated by comparison methods</param>
<param name="k">First kth elements satisfying the condition</param>
<returns>Array of integer</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Maths.Find(System.Boolean[0:,0:],System.Int32[]@,System.Int32[]@)">
<summary> Find base 0 indices of members of a matrix that meet a condition </summary>
<param name="A">2D array of bool generated by comparison methods</param>
<param name="k">Fist kth elements satisfying the condition</param>
<returns>Array of integer</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Maths.Find(System.Boolean[],System.Int32)">
<summary> Find base 0 indices of members of a matrix that meet a condition </summary>
<param name="A">1D array of bool generated by comparison methods</param>
<param name="k">First kth elements satisfying the condition</param>
<returns>Array of integer</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Maths.All(System.Boolean[])">
<summary> </summary>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Maths.All(System.Boolean[0:,0:])">
<summary> </summary>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Maths.Any(System.Boolean[])">
<summary> </summary>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Maths.Any(System.Boolean[0:,0:])">
<summary> </summary>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Maths.Meshgrid(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="x"/>
<param name="y"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Maths.ReadMatrix(System.String)">
<summary> </summary>
<param name="filename"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Maths.ReadRowVec(System.String)">
<summary> </summary>
<param name="filename"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Maths.ReadColVec(System.String)">
<summary> </summary>
<param name="filename"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Maths.WriteMatrix(CypherCrescent.MathematicsLibrary.Matrix,System.String)">
<summary> </summary>
<param name="A"/>
<param name="filename"/>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Matrix.Classification">
<summary> </summary>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Matrix.Solver">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Type">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.LastSolver">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Rows">
<summary> Returns the number of rows in A11 Matrix </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Cols">
<summary> Returns the number of columns in A11 Matrix </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Numel">
<summary> Returns the number of elements in A11 Matrix </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.NumLUDecomposition">
<summary> Returns the number of times A11 Matrix object is decomposed into its LU factors </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.NumLinSysSolved">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.T">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Mat">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.L_lu">
<summary> Lower Triangular Matrix Generated by LU factorization methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.U_lu">
<summary> Upper Triangular Matrix Generated by LU factorization methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.L_chol">
<summary> Lower Triangular Matrix Generated by cholesky factorization methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.U_chol">
<summary> Upper Triangular Matrix Generated by cholesky factorization methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.U_svd">
<summary> Column Orthonormal Matrix Generated by SVD decomposition methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.S_svd">
<summary> A Diagonal Matrix Generated by SVD decomposition methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.V_svd">
<summary> Row Orthonormal Matrix Generated by SVD decomposition methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.U_bdr">
<summary> U Matrix Generated by BiDiagonal Reduction methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.B_bdr">
<summary> BiDiagonal Matrix Generated by BiDiagonal Reduction methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.V_bdr">
<summary> V Matrix Generated by BiDiagonal Reduction methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.U_tdr">
<summary> U Matrix Generated by TriDiagonal Reduction methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.T_tdr">
<summary> TriDiagonal Matrix Generated by TriDiagonal Reduction methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.V_tdr">
<summary> V Matrix Generated by TriDiagonal Reduction methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Q_qr">
<summary> Q Matrix Generated by QR factorization methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.R_qr">
<summary> R Matrix Generated by QR factorization methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.L_ldlt">
<summary> Lower Triangular Matrix Generated by LDL factorization methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.D_ldlt">
<summary> Diagonal Matrix Generated by LDL factorization methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.EigVals">
<summary> Matrix of EigenValues </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.EigVecs">
<summary> Matrix of EigenVectors </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Charpoly">
<summary> Array of Coefficient of Characteristics Polynomial </summary>
</member>
<member name="F:CypherCrescent.MathematicsLibrary.Matrix.pi">
<summary> Array of interger for permutation </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.#ctor(System.Double[0:,0:])">
<summary> </summary>
<param name="entry"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.op_Implicit(System.Double[0:,0:])~CypherCrescent.MathematicsLibrary.Matrix">
<summary> </summary>
<param name="value"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.op_Implicit(CypherCrescent.MathematicsLibrary.Matrix[0:,0:])~CypherCrescent.MathematicsLibrary.Matrix">
<summary> </summary>
<param name="value"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.op_Implicit(System.Double)~CypherCrescent.MathematicsLibrary.Matrix">
<summary> </summary>
<param name="value"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.#ctor(System.Int32[],System.Int32[],System.Double[],System.Int32,System.Int32)">
<summary> </summary>
<param name="_rows"/>
<param name="_cols"/>
<param name="entry"/>
<param name="rows"/>
<param name="cols"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.#ctor(System.Boolean[0:,0:])">
<summary> Matrix Class Constructor </summary>
<param name="entry">2D array of double</param>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.op_Implicit(System.Boolean[0:,0:])~CypherCrescent.MathematicsLibrary.Matrix">
<summary> Implicit operator for conversion from bool [,] to matrix </summary>
<param name="x">bool [,] to be converted to Matrix</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.op_Implicit(System.Collections.Generic.List{CypherCrescent.MathematicsLibrary.ColVec})~CypherCrescent.MathematicsLibrary.Matrix">
<summary> Implicit operator for conversion from double[] to matrix </summary>
<param name="value">Matrix to be converted</param>
<returns>array of integers</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.op_Implicit(System.Collections.Generic.List{CypherCrescent.MathematicsLibrary.RowVec})~CypherCrescent.MathematicsLibrary.Matrix">
<summary> Implicit operator for conversion from double[] to matrix </summary>
<param name="value">Matrix to be converted</param>
<returns>array of integers</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetEnumerator">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Zeros(System.Int32,System.Int32)">
<summary> </summary>
<param name="N"/>
<param name="M"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Zeros(System.Int32)">
<summary> </summary>
<param name="N"/>
<param name="M"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Ones(System.Int32,System.Int32)">
<summary> </summary>
<param name="N"/>
<param name="M"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Ones(System.Int32)">
<summary> </summary>
<param name="N"/>
<param name="M"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.ToString">
<summary> Converts Matrix to String for Console WriteLine. </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.ToString(System.String)">
<summary> </summary>
<param name="delimiter"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Size">
<summary> Gets the size of A11 matrix. </summary>
<returns>Array of intergers containing the number of rows and columns of A11 matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Length">
<summary> Gets the size of A11 matrix. </summary>
<returns>larger of the two dimensions</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Size(System.Int32)">
<summary> Gets the size of A11 matrix. </summary>
<returns>number of element along A11 given dimenson of rows and columns of A11 matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.IsSquare">
<summary> Test of A11 matrix is square </summary>
<returns>bool</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.IsNaN">
<summary> Test for elements that is NaN </summary>
<returns>array of bool same saze as the matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.AllFinite">
<summary> Test for elements that is NaN </summary>
<returns>array of bool same saze as the matrix</returns>
</member>
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.Matrix.IsNotNaN"  -->
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.IsEmpty">
<summary> Test for Empty </summary>
<returns>array of bool same saze as the matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.IsUpTri">
<summary> Test to determine if the Matrix is upper triangular </summary>
<returns>bool</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.IsLowTri">
<summary> Test to determine if the Matrix is lower triangular </summary>
<returns>bool</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Duplicate">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Triu(System.Int32)">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Tril(System.Int32)">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Classify">
<summary> Classifies Matrix for Solution of Linear System </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.IsDiag">
<summary> Test to determine if the Matrix is Diagonal </summary>
<returns>bool</returns>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.IsTriDiag">
<summary> </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Diag(CypherCrescent.MathematicsLibrary.ColVec,System.Int32)">
<summary> Returns A11 column containing the diagonals of A if A ia A11 Matrix and returns A11 Matrix containg A as its diagonal if A is A11 column vector </summary>
<param name="A">Matrix or A11 column vector</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Diag(System.Collections.Generic.List{CypherCrescent.MathematicsLibrary.ColVec},System.Collections.Generic.List{System.Int32})">
<summary> Returns A11 column containing the diagonals of A if A ia A11 Matrix and returns A11 Matrix containg A as its diagonal if A is A11 column vector </summary>
<param name="Alist">List of Column Vectors</param>
<param name="klist">List of positions from diagonal</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Diag(CypherCrescent.MathematicsLibrary.Matrix,System.Int32)">
<summary> Returns A11 column containing the diagonals of A if A ia A11 Matrix and returns A11 Matrix containg A as its diagonal if A is A11 column vector </summary>
<param name="A">Matrix or A11 column vector</param>
<returns>Matrix</returns>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.IsSymmetric">
<summary> Test to determine if the Matrix is Symmetric </summary>
<returns>bool</returns>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.IsPosDef">
<summary> Test to determine if the Matrix is positve definite </summary>
<returns>bool</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Range">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Min(System.Int32@)">
<summary> Minimum value from colvec instance. </summary>
<param name="IndexOfMin">Index of Maximum element</param>
<returns>double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Min(System.Int32@,System.Int32@)">
<summary> Minimum value from colvec instance. </summary>
<param name="IndexOfMin">Index of Maximum element</param>
<returns>double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Max(System.Int32@)">
<summary> Minimum value from colvec instance. </summary>
<param name="IndexOfMin">Index of Maximum element</param>
<returns>double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Max(System.Int32@,System.Int32@)">
<summary> Minimum value from colvec instance. </summary>
<param name="IndexOfMin">Index of Maximum element</param>
<returns>double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Max(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix)">
<summary> Matrix of the maximum elements comparing matrix A and B </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Min(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix)">
<summary> Matrix of the minimum elements comparing matrix A and B </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix</returns>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Item(System.Int32)">
<summary> Access this matrix as A11 1D array </summary>
<param name="I"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Item(CypherCrescent.MathematicsLibrary.Indexer)">
<summary> Access this matrix as A11 2D array </summary>
<param name="I"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Item(System.Int32,System.Int32)">
<summary> Access this matrix as A11 2D array </summary>
<param name="iRow"/>
<param name="iCol"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Item(CypherCrescent.MathematicsLibrary.Indexer,CypherCrescent.MathematicsLibrary.Indexer)">
<summary> Access this matrix as A11 2D array </summary>
<param name="iRow"/>
<param name="iCol"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Item(System.String,System.Int32)">
<summary> Access this matrix as A11 2D array </summary>
<param name="iRow"/>
<param name="iCol"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Item(CypherCrescent.MathematicsLibrary.Indexer,System.Int32)">
<summary> Access this matrix as A11 2D array </summary>
<param name="iRow"/>
<param name="iCol"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Item(System.Int32,System.String)">
<summary> Access this matrix as A11 2D array </summary>
<param name="iRow"/>
<param name="iCol"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Item(System.Int32,CypherCrescent.MathematicsLibrary.Indexer)">
<summary> Access this matrix as A11 2D array </summary>
<param name="iRow"/>
<param name="iCol"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Item(System.String,CypherCrescent.MathematicsLibrary.Indexer)">
<summary> Access this matrix as A11 2D array </summary>
<param name="iRow"/>
<param name="iCol"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Item(CypherCrescent.MathematicsLibrary.Indexer,System.String)">
<summary> Access this matrix as A11 2D array </summary>
<param name="iRow"/>
<param name="iCol"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Item(System.Boolean[0:,0:])">
<summary> Access this matrix as A11 2D array with A11 bool array </summary>
<param name="B"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Matrix.Item(System.String)">
<summary> </summary>
<param name="I"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Strassen(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix)">
<summary> Strassen Multiplication </summary>
<param name="A"/>
<param name="B"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.MultTW(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix)">
<summary> Perfoms Termwise Multiplicaition of Matrices </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix </returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.MultTW(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix[])">
<summary> Termwise Multiplicaition of Matrices </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix </returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.DivTW(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix)">
<summary> Divide Matrix termwise </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Termwise division of A and B</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.DivTW(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix[])">
<summary> Divide Matrix termwise </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Termwise division of A and B</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Vcart(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix)">
<summary> Vertical Concartination of Matrix A and B </summary>
<param name="A">Matrix</param>
<param name="B">Matrix</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Vcart(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.Matrix)">
<summary> Vertical Concartination of Matrix A and B </summary>
<param name="A">Matrix</param>
<param name="B">Matrix</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Vcart(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix[])">
<summary> Vertical Concartination of Matrix A and B </summary>
<param name="A">Matrix</param>
<param name="B">Matrix</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Hcart(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix)">
<summary> Vertical Concartination of Matrix A and B </summary>
<param name="A">Matrix</param>
<param name="B">Matrix</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Hcart(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix)">
<summary> Vertical Concartination of Matrix A and B </summary>
<param name="A">Matrix</param>
<param name="B">Matrix</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Hcart(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Vertical Concartination of Matrix A and B </summary>
<param name="A">Matrix</param>
<param name="B">Matrix</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Hcart(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix[])">
<summary> Vertical Concartination of Matrix A and B </summary>
<param name="A">Matrix</param>
<param name="B">Matrix</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Hcart(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec[])">
<summary> Vertical Concartination of Matrix A and B </summary>
<param name="A">Matrix</param>
<param name="B">Matrix</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Mat2Vec(CypherCrescent.MathematicsLibrary.Matrix)">
<summary> Converts A11 matrix to A11 vector. </summary>
<param name="A">Matrix to be converted</param>
<returns>Vector</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Vec2Mat(CypherCrescent.MathematicsLibrary.Matrix,System.Int32)">
<summary> Converts from vector to matrix </summary>
<param name="A">Matrix to be converted</param>
<param name="cols">number of colums</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Reshape(CypherCrescent.MathematicsLibrary.Matrix,System.Int32,System.Int32)">
<summary> The reshape function returns A11 new array with n rows and m columns (n*m must equal the number of elements in the original array). The new array has the same elements as the original </summary>
<param name="A">Matrix to be reshaped</param>
<param name="rows">number of rows</param>
<param name="cols">number of columns</param>
<returns>A11 new array with n rows and m columns</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Reshape(CypherCrescent.MathematicsLibrary.ColVec,System.Int32,System.Int32)">
<summary> The reshape function returns A11 new array with n rows and m columns (n*m must equal the number of elements in the original array). The new array has the same elements as the original </summary>
<param name="A">Matrix to be reshaped</param>
<param name="rows">number of rows</param>
<param name="cols">number of columns</param>
<returns>A11 new array with n rows and m columns</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Fliplr">
<summary> Flip an instance Matrix laterally. </summary>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Flipud">
<summary> Flip an instance Matrix Vertically. </summary>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Repmat(CypherCrescent.MathematicsLibrary.Matrix,System.Int32,System.Int32)">
<summary> specifies A11 list of scalars, I,J, that describes how copies of A are arranged in each dimension. When A has 2 dimensions, the size of B is size(A).*[I,J]. For example, repmat(new Matrix(new double[,]{{1 2}, {3 4}}),2,3) returns A11 4-by-6 matrix. </summary>
<param name="A">Matrix</param>
<param name="I">int</param>
<param name="J">int</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Repelem(CypherCrescent.MathematicsLibrary.Matrix,System.Int32[])">
<summary> returns A11 vector of repeated elements of v. </summary>
<param name="A"/>
<param name="nrep"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetTranspose">
<summary> Transpose A11 Matrix. </summary>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.RowSetDiff(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix)">
<summary> Returns the rows of A that is not in B </summary>
<param name="size"/>
<param name="random"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Var">
<summary> Variance of Matix A. </summary>
<param name="A">Matrix A</param>
<returns>double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.ColumnSetDiff(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix)">
<summary> </summary>
<param name="size"/>
<param name="random"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Norm(System.Double)">
<summary> V.Norm() returns the Euclidean norm of vector V. This norm is also called the 2-norm, vector magnitude, or Euclidean length. V.Norm(p) returns the generalized vector p-norm. X.Norm() returns the 2-norm or maximum singular value of matrix X, which is approximately max(svd(X)). X.Norm(p) eturns the p-norm of matrix X, where p is 1, 2, or Inf: * If p = 1, then n is the maximum absolute column sum of the matrix. * If p = 2, then n is approximately max(svd(X)). This is equivalent to norm(X). * If p = Inf, then n is the maximum absolute row sum of the matrix. </summary>
<param name="n"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.ArrayEval(System.Func{System.Double,System.Double})">
<summary> Array Evaluator </summary>
<param name="fun"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.ArrayEval(System.Func{CypherCrescent.MathematicsLibrary.ColVec,System.Double})">
<summary> Array Evaluator </summary>
<param name="fun"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.ArrayEval(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec})">
<summary> Array Evaluator </summary>
<param name="fun"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.ArrayEval(System.Func{CypherCrescent.MathematicsLibrary.RowVec,System.Double})">
<summary> Array Evaluator </summary>
<param name="fun"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.ArrayEval(System.Func{CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec})">
<summary> Array Evaluator </summary>
<param name="fun"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.SwapRow(System.Int32,System.Int32)">
<summary> Swap A11 two specified rows. </summary>
<param name="M">Row 1</param>
<param name="N">Row 2</param>
<returns>Void</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.SwapColumn(System.Int32,System.Int32)">
<summary> Swap A11 two specified columns. </summary>
<param name="M">Row 1</param>
<param name="N">Row 2</param>
<returns>Void</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.BackSubs(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="U"/>
<param name="b"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.ForwardSubs(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="L"/>
<param name="b"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Inverse">
<summary> Y = X.Inverse() computes the inverse of square matrix X. X^(-1) is equivalent to inv(X). x = A12/A is computed differently than x = inv(A) * A12 and is recommended for solving systems of linear equations. </summary>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.PartitionInverse(CypherCrescent.MathematicsLibrary.Matrix,System.Int32)">
<summary> </summary>
<param name="A"/>
<param name="j"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Spy(System.Double)">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Eye(System.Int32)">
<summary> I = Matrix.Eye() returns A11 Matrix with one element (the scalar) 1. I = Matrix.Eye(N) returns an N-by-N identity matrix with ones on the main diagonal and zeros elsewhere. </summary>
<param name="N"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Eye(System.Int32,System.Int32)">
<summary> I = Matrix.Eye(M, N) returns an M-by-N matrix with ones on the main diagonal and zeros elsewhere. </summary>
<param name="N"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.SolveByLDL(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="b"/>
<param name="cutoff"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.SolveBySVD(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="b"/>
<param name="cutoff"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.SolveByChol(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="b"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.SolveByLU(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="b"/>
<param name="ans"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.MakeLU">
<summary> Function for LU decomposition </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.MakeiLU">
<summary> Function for Incomplete LU decomposition </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Det">
<summary> Computes the determinant of a Matrix </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetL_lu">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetPL_lu">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetU_lu">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.MakeChol">
<summary> Cholesky decomposition </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.MakeiChol">
<summary> Incomplete Cholesky decomposition used as preconditioner in iterative solution of sparse matrices. </summary>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.LU_Rank1Update(CypherCrescent.MathematicsLibrary.Matrix)">
<summary> </summary>
<param name="DelA"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.LU_Rank1Update(System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="alpha"/>
<param name="_y"/>
<param name="_z"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Chol_Rank1Update(CypherCrescent.MathematicsLibrary.Matrix)">
<summary> </summary>
<param name="DelA"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Chol_Rank1Update(System.Double,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="alpha"/>
<param name="_y"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.LDL_Rank1Update(CypherCrescent.MathematicsLibrary.Matrix)">
<summary> </summary>
<param name="DelA"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.LDL_Rank1Update(System.Double,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="alpha"/>
<param name="_y"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.FactorUpdate(CypherCrescent.MathematicsLibrary.Matrix)">
<summary> </summary>
<param name="DelA"/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.FactorUpdate(System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="alpha"/>
<param name="y"/>
<param name="z"/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetL_chol">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetU_chol">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.MakeSVD">
<summary> Single Value Decomposition </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetU_svd">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetS_svd">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetV_svd">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Gmres(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec,System.Int32,System.Double,System.Int32,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="b"/>
<param name="restart"/>
<param name="tol"/>
<param name="maxit"/>
<param name="M1"/>
<param name="M2"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.CG(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec,System.Double,System.Int32,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="b"/>
<param name="restart"/>
<param name="tol"/>
<param name="maxit"/>
<param name="M1"/>
<param name="M2"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.HouseHolder(CypherCrescent.MathematicsLibrary.ColVec,System.Int32)">
<summary> </summary>
<param name="b"/>
<param name="k"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.BiDiagReduce">
<summary> BiDiagonal Reduction </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetU_bdr">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetB_bdr">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetV_bdr">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.TriDiagReduce">
<summary> TriDiagonal Reduction </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetU_tdr">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetT_tdr">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetV_tdr">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.MakeLDLT">
<summary> </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetD_ldl">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetL_ldl">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.MakeQR">
<summary> Function for QR decomposition </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetQ_qr">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.GetR_qr">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Rref(System.Double)">
<summary> Returns the reduced row echelon form of the instance of A11 Matrix, its pivot columns, and basis of its null space </summary>
<param name="tol"> (optional)specifies A11 pivot tolerance that the algorithm uses to determine negligible columns.</param>
<returns>Reduced Row Echelon Form R, Pivot P, basis of Null Space N </returns>
<example> Matrix A = new double[,] { { 8, 1, 6, 1, 16 }, { 3, 5, 6, 1, 15 }, { 4, 7, 2, 1, 14 } }; (Matrix R, Indexer P, Matrix N) = A.Rref(); Console.WriteLine("\n R = \n" + R + "\n P = \n" + P + "\n N = \n" + N); </example>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Interp1(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,System.Double)">
<summary> One dimensional linear Interpolation </summary>
<param name="X">Matrix</param>
<param name="Y">Matrix</param>
<param name="x">double (query points)</param>
<returns>double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Interp1(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.Matrix,System.Double)">
<summary> One dimensional linear Interpolation </summary>
<param name="X">Matrix</param>
<param name="Y">Matrix</param>
<param name="x">double (query points)</param>
<returns>double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Interp1(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> one dimensional linear Interpolation </summary>
<param name="X">Matrix </param>
<param name="Y">Matrix </param>
<param name="x">Matrix (query points)</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Interp1(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> one dimensional linear Interpolation </summary>
<param name="X">Matrix </param>
<param name="Y">Matrix </param>
<param name="x">Matrix (query points)</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.LangInterp1(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,System.Double)">
<summary> One dimensional langrange Interpolation </summary>
<param name="xp"/>
<param name="fp"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.LangInterp1(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> one dimensional langrange Interpolation </summary>
<param name="X">Matrix</param>
<param name="Y">Matrix</param>
<param name="x">Matrix (query points)</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.CubicInterp1(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix,System.Double)">
<summary> One dimensional cubic Interpolation given the dydx </summary>
<param name="X"/>
<param name="Y"/>
<param name="dydx"/>
<param name="x"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.CubicInterp1(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> One dimensional cubic Interpolation given dydx </summary>
<param name="X"/>
<param name="Y"/>
<param name="dydx"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Interp2(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.Matrix,System.Double,System.Double)">
<summary> Two dimensional linear Interpolation. Number of elements in X and Y must be equal to the number of rows and cols of Z respectively </summary>
<param name="X">Matrix</param>
<param name="Y">Matrix</param>
<param name="Z">Matrix</param>
<param name="x">double (query points)</param>
<param name="y">double (query points)</param>
<returns>double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.Interp2(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> Two dimensional linear Interpolation </summary>
<param name="X">Matrix</param>
<param name="Y">Matrix</param>
<param name="Z">Matrix</param>
<param name="x">Matrix (query points)</param>
<param name="y">Matrix (query points)</param>
<returns>Matrix of size x.Numel by y.Numel)</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.LangInterp2(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.Matrix,System.Double,System.Double)">
<summary> </summary>
<param name="X"/>
<param name="Y"/>
<param name="Z"/>
<param name="x"/>
<param name="y"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Matrix.LangInterp2(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="X"/>
<param name="Y"/>
<param name="Z"/>
<param name="x"/>
<param name="y"/>
<returns/>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Ode">
<summary> Ode </summary>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Ode.Set">
<summary> Contains settings for OdeSolvers algortihms </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Set.CheckIndex">
<summary> States whether to check the index of a DAE or not </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Set.RelTol">
<summary> Tolerance used in determining the step size of auto step control methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Set.MaxStepVal">
<summary> Maximum Step Value </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Set.AbsTol">
<summary> Tolerance used in determining the threshold of solution to be subjected to relative tolerance criteria </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Set.MinStepDownFactor">
<summary> Minimum Step Factor used in auto step control schemes </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Set.MaxStepUpFactor">
<summary> Maximum Step Factor used in auto step control schemes </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Set.Display">
<summary> Used to set the odesolver to write to console </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Set.Stats">
<summary> Used to set the odesolver tokeep statics of the process </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Set.Nvars">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Set.MaxSteps">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Set.UserDefinedJacobian">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Set.UserDefinedMassJacobian">
<summary> Differentiation of the mass with respect to each component of y. Note that this is necessay only when M is stronly nonlienar in y </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Set.MassType">
<summary> Indicates the type of mass function </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.InnerSet.RelTol">
<summary> Tolerance used in determining the step size of auto step control methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.InnerSet.AbsTol">
<summary> Tolerance used in determining the threshold of solution to be subjected to relative tolerance criteria </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.InnerSet.MaxStepVal">
<summary> Maximum Step Value </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.InnerSet.MinStepDownFactor">
<summary> Minimum Step Factor used in auto step control schemes </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.InnerSet.MaxStepUpFactor">
<summary> Maximum Step Factor used in auto step control schemes </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.InnerSet.Display">
<summary> Used to set the odesolver to write to console </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.InnerSet.Stats">
<summary> Used to set the odesolver tokeep statics of the process </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.InnerSet.Nvars">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.InnerSet.MaxSteps">
<summary> Maximum number of steps allowed </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.InnerSet.UserDefinedJacobian">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.InnerSet.UserDefinedMassJacobian">
<summary> Differentiation of the mass with respect to each component of y. Note that this is necessay only when M is stronly nonlienar in y </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.InnerSet.MassType">
<summary> Indicates the type of mass function </summary>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Ode.Result">
<summary> Contain result of calls to Ordinary Differential Equation and Differential Algebraic Equation Solvers </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Result.SolverName">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Result.FunEvals">
<summary> Number of function call </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Result.X">
<summary> ColVec of the independent variable </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Result.Y">
<summary> ColVec or Matrix of dependent variable-each row correspond to a value of the independent variable </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Result.IsComplete">
<summary> Determines whether the solution process ran to completion or not </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Result.ErrorMessage">
<summary> Contains message about the situation in event when the algorithm encounters a problem </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Result.Suggestion">
<summary> Suggest a better solver based on the behaviour of the previous one. </summary>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Ode.Coefficients">
<summary> Butcher Tableau </summary>
</member>
<member name="F:CypherCrescent.MathematicsLibrary.Ode.Coefficients.alpha">
<summary> alpha, psi and chi </summary>
</member>
<member name="F:CypherCrescent.MathematicsLibrary.Ode.Coefficients.psi">
<summary> alpha, psi and chi </summary>
</member>
<member name="F:CypherCrescent.MathematicsLibrary.Ode.Coefficients.chi">
<summary> alpha, psi and chi </summary>
</member>
<member name="F:CypherCrescent.MathematicsLibrary.Ode.Coefficients.beta">
<summary> beta </summary>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Ode.Jacobian">
<summary> Jacobian of the function with respoect to the variables sort </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Jacobian.Jac">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Jacobian.Jac_y">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Ode.Jacobian.Jac_yp">
<summary> </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Jacobian.#ctor(System.Func{System.Double,System.Double,System.Double})">
<summary> </summary>
<param name="fun"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Jacobian.#ctor(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix})">
<summary> </summary>
<param name="fun"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Jacobian.#ctor(System.Func{System.Double,System.Double,System.Double,System.Double},System.Func{System.Double,System.Double,System.Double,System.Double})">
<summary> </summary>
<param name="fun1"/>
<param name="fun2"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Jacobian.#ctor(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix},System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix})">
<summary> </summary>
<param name="fun1"/>
<param name="fun2"/>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Ode.InterpolatingFunction">
<summary> Interpolating Function that computes the dependent valirable given the inpendent varaible </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Trapezoidal(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Double@,CypherCrescent.MathematicsLibrary.Ode.Result)">
<summary> </summary>
<param name="dydt"/>
<param name="t"/>
<param name="yn"/>
<param name="ypn"/>
<param name="dt"/>
<param name="error"/>
<param name="OdeResult"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Trapezoidal(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Double,CypherCrescent.MathematicsLibrary.ColVec@,CypherCrescent.MathematicsLibrary.Ode.Result)">
<summary> </summary>
<param name="dydt"/>
<param name="t"/>
<param name="yn"/>
<param name="ypn"/>
<param name="dt"/>
<param name="error"/>
<param name="OdeResult"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Trapezoidal(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Double,System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix},CypherCrescent.MathematicsLibrary.ColVec@,CypherCrescent.MathematicsLibrary.Ode.Result)">
<summary> </summary>
<param name="fun"/>
<param name="t"/>
<param name="yn"/>
<param name="ypn"/>
<param name="dt"/>
<param name="Mass"/>
<param name="error"/>
<param name="OdeResult"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Trapezoidal(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,System.Double,System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix},CypherCrescent.MathematicsLibrary.ColVec@,CypherCrescent.MathematicsLibrary.Ode.Result)">
<summary> </summary>
<param name="fun"/>
<param name="t"/>
<param name="yn"/>
<param name="ypn"/>
<param name="dt"/>
<param name="Mass"/>
<param name="error"/>
<param name="OdeResult"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Trapezoidal(System.Func{System.Double,System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Double@,CypherCrescent.MathematicsLibrary.Ode.Result)">
<summary> </summary>
<param name="fun"/>
<param name="t"/>
<param name="yn"/>
<param name="ypn"/>
<param name="dt"/>
<param name="error"/>
<param name="OdeResult"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Trapezoidal(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Double,CypherCrescent.MathematicsLibrary.ColVec@,CypherCrescent.MathematicsLibrary.Ode.Result)">
<summary> </summary>
<param name="fun"/>
<param name="t"/>
<param name="yn"/>
<param name="ypn"/>
<param name="dt"/>
<param name="error"/>
<param name="OdeResult"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk4(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="dx"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk4(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="dx"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.dirk12(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Double,System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix},CypherCrescent.MathematicsLibrary.ColVec@,CypherCrescent.MathematicsLibrary.Ode.Result)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="Mass"/>
<param name="error"/>
<param name="OdeResult"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.dirk12(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Double,CypherCrescent.MathematicsLibrary.ColVec@,CypherCrescent.MathematicsLibrary.Ode.Result)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="error"/>
<param name="OdeResult"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.dirk12(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Double@,CypherCrescent.MathematicsLibrary.Ode.Result)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="error"/>
<param name="OdeResult"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.dirk45(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Double,System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix},CypherCrescent.MathematicsLibrary.ColVec@,CypherCrescent.MathematicsLibrary.Ode.Result)">
<summary> </summary>
<param name="Fun"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="Mass"/>
<param name="error"/>
<param name="OdeResult"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.dirk45(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Double,CypherCrescent.MathematicsLibrary.ColVec@,CypherCrescent.MathematicsLibrary.Ode.Result)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="error"/>
<param name="OdeResult"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.dirk45(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Double@,CypherCrescent.MathematicsLibrary.Ode.Result)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="error"/>
<param name="OdeResult"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk38(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="dx"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk38(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="dx"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk5(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="dx"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk5(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="dx"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk23(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Double@)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="error"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk23(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Double,CypherCrescent.MathematicsLibrary.ColVec@)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="error"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk45_FLBG(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Double@)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="dx"/>
<param name="error"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk45_DMNP(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Double@)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="error"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk45_FLBG(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Double,CypherCrescent.MathematicsLibrary.ColVec@)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="error"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk45_DMNP(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Double,CypherCrescent.MathematicsLibrary.ColVec@)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="error"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk56(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Double@)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="error"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk56(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Double,CypherCrescent.MathematicsLibrary.ColVec@)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="error"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk67(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Double@)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="error"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk67(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Double,CypherCrescent.MathematicsLibrary.ColVec@)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="error"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk78(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Double@)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="error"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk78(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Double,CypherCrescent.MathematicsLibrary.ColVec@)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="error"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk89(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Double@)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="error"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.rk89(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Double,CypherCrescent.MathematicsLibrary.ColVec@)">
<summary> </summary>
<param name="dydx"/>
<param name="x"/>
<param name="y"/>
<param name="yp"/>
<param name="dx"/>
<param name="error"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.decic(System.Func{System.Double,System.Double,System.Double,System.Double},System.Double,System.Double,System.Int32,System.Double,System.Int32)">
<summary> Compute consistent initial conditions for Ode.ode12i and Ode.ode23i </summary>
<param name="fun"/>
<param name="t0"/>
<param name="y0"/>
<param name="ytruth"/>
<param name="yp0"/>
<param name="yptruth"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.decic(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double,CypherCrescent.MathematicsLibrary.ColVec,System.Int32[],CypherCrescent.MathematicsLibrary.ColVec,System.Int32[])">
<summary> Compute consistent initial conditions for Ode.ode15i </summary>
<param name="fun"/>
<param name="t0"/>
<param name="y0"/>
<param name="ytruth"/>
<param name="yp0"/>
<param name="yptruth"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.Ode.Ode23(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)"  -->
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.Ode.Ode45(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)"  -->
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.Ode.Ode56(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)"  -->
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.Ode.Ode67(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)"  -->
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.Ode.Ode78(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)"  -->
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.Ode.Ode89(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)"  -->
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Ode12s(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)">
<summary> Integrates a stiff ordinary differential equations using Adaptive Trapezoidal Method </summary>
<param name="dydx">function of the first order differentiation</param>
<param name="initcon">initial condition y(tspan[0])</param>
<param name="tspan">interval of integration</param>
<param name="options">(Optional) integraion procedure settings such as: maximum iteration number, initial step fraction, maximum step fraction and display setting</param>
<returns/>
<example>
$$y'_1 = y_2$$ $$y'_2 = \mu(1 - y_1^2)y_2-y_1$$
<code> using CypherCrescent.MathematicsLibrary; using static MathsChart.Chart; double mu = 1000; double[] dy; Ode.Result TY; ChartHandle plt; ColVec dydt(double t, ColVec y) => dy = [y[1], mu * (1-y[0]*y[0])*y[1]-y[0]]; TY = Ode.Ode15s(dydt, [ 2, 0 ], [ 0, 3000 ]); plt = Plot(TY.X, TY.Y, "-o"); plt.Title = "Solution of van DyDx Pol Equation (mu = 1000) with ODE15s"; plt.XLabel = "Time t"; plt.YLabel = "Solution y"; plt.Show(); </code>
<image href="../graphics/Ode45 Vander Pole.png"/>
</example>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Ode15s(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)">
<summary> Integrates a stiff ordinary differential equations using Adaptive Trapezoidal Method </summary>
<param name="dydx">function of the first order differentiation</param>
<param name="initcon">initial condition y(tspan[0])</param>
<param name="tspan">interval of integration</param>
<param name="options">(Optional) integraion procedure settings such as: maximum iteration number, initial step fraction, maximum step fraction and display setting</param>
<returns/>
<example>
$$y'_1 = y_2$$ $$y'_2 = \mu(1 - y_1^2)y_2-y_1$$
<code> using CypherCrescent.MathematicsLibrary; using static MathsChart.Chart; double mu = 1000; double[] dy; Ode.Result TY; ChartHandle plt; ColVec dydt(double t, ColVec y) => dy = [y[1], mu * (1-y[0]*y[0])*y[1]-y[0]]; TY = Ode.Ode15s(dydt, [ 2, 0 ], [ 0, 3000 ]); plt = Plot(TY.X, TY.Y, "-o"); plt.Title = "Solution of van DyDx Pol Equation (mu = 1000) with ODE15s"; plt.XLabel = "Time t"; plt.YLabel = "Solution y"; plt.Show(); </code>
<image href="../graphics/Ode45 Vander Pole.png"/>
</example>
<exception cref="T:System.Exception"/>
</member>
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.Ode.Ode45s(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)"  -->
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Ode15i(System.Func{System.Double,System.Double,System.Double,System.Double},System.ValueTuple{System.Double,System.Double},System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)">
<summary> Integrates a implicit ordinary differential equations using Adaptive Trapezoidal Method </summary>
<param name="fun">Implicit function of the first order differentiation</param>
<param name="initcon">initial condition (y(tspan[0]), yp([tspan[0]))</param>
<param name="tspan">interval of integration</param>
<param name="options">(Optional) integraion procedure settings such as: maximum iteration number, initial step fraction, maximum step fraction and display setting</param>
<returns>Ode.Result containing a ColVecs for X and Y</returns>
<example>
$$ ty^2(y')^3 - y^3(y')^2 + t(t^2 + 1)y' - t^2y = 0$$
<code> using System; using CypherCrescent.MathematicsLibrary; using static MathsChart.Chart; { static double fun(double t, double y, double yp) => t * y * y * yp * yp * yp - y * y * y * yp * yp + t * (t * t + 1) * yp - t * t * y; double t0 = 1, y0 = Sqrt(t0 * t0 + 1 / 2.0), yp0 = 0; (y0, yp0) = Ode.decic(fun, t0, y0, 1, yp0, 0); TY = Ode.Ode15i(fun, (y0, yp0), [t0, 10], guide); ColVec Y_exact = TY.X.Select(t => Sqrt(t * t + 0.5)).ToList(); var plt = Plot(TY.X, TY.Y["", 0], "*"); plt.AddPlot(TY.X, Y_exact, "-o"); plt.Title = "Implicit differential (weissinger) equation with ODE15i"; plt.XLabel = "Time t"; plt.YLabel = "Solution y"; plt.Show(); } </code>
<image href="../graphics/Ode45 Vander Pole.png"/>
</example>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Ode23(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double[],System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)">
<summary> Integrates a system of non-stiff ordinary differential equations using (Bogacki–Shampine) adaptive RungeKutta Explicit Method </summary>
<param name="dydx">function of system of first order differentiation</param>
<param name="initcon">initial condition y(tspan[0])</param>
<param name="tspan">interval of integration</param>
<param name="options">(Optional) integraion procedure settings such as: maximum iteration number, initial step fraction, maximum step fraction and display setting</param>
<returns>Ode.Result containing a ColVec for X and a Matrix for Y</returns>
<example>
$$y'_1 = y_2$$ $$y'_2 = \mu(1 - y_1^2)y_2-y_1$$
<code> using CypherCrescent.MathematicsLibrary; using static MathsChart.Chart; double mu = 1; ColVec dydt(double t, ColVec y) => new double[] { y[1], mu*(1-y[0]*y[0])*y[1]-y[0] }; Ode.Result TY = Ode.Ode23(dydt, [ 2, 0 ], [ 0, 20 ]); var plt = Plot(TY.X, TY.Y, "-o"); plt.Title = "Solution of van DyDx Pol Equation (mu = 1) with ODE23"; plt.XLabel = "Time t"; plt.YLabel = "Solution y"; plt.Show(); </code>
<image href="../graphics/Ode45 Vander Pole.png"/>
</example>
</member>
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.Ode.Ode45(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double[],System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)"  -->
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.Ode.Ode56(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double[],System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)"  -->
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.Ode.Ode67(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double[],System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)"  -->
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.Ode.Ode78(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double[],System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)"  -->
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.Ode.Ode89(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double[],System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)"  -->
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Ode15s(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double[],System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)">
<summary> Integrates a system of stiff ordinary differential equations using Adaptive Trapezoidal Method </summary>
<param name="dydx">function of system of first order differentiation</param>
<param name="initcon">initial condition y(tspan[0])</param>
<param name="tspan">interval of integration</param>
<param name="options">(Optional) integraion procedure settings such as: maximum iteration number, initial step fraction, maximum step fraction and display setting</param>
<returns>Ode.Result containing a ColVec for X and a Matrix for Y</returns>
<example>
$$ y'_1 = y_1y_3 - y_2 $$ $$ y'_2 = y_1 - 1 $$ $$ y'_3 = y_1 + y_2 + y_3 $$
<code> using CypherCrescent.MathematicsLibrary; using static MathsChart.Chart; ColVec dydt(double t, ColVec y) => new double[] { y[0] * y[2] - y[1], y[0] - 1, y[0] + y[1] + y[2] }; Ode.Result TY = Ode.Ode15t(dydt, [ 1, 1, -2 ], [ 0, 10 ]); var plt = Plot(TY.X, TY.Y, "-o"); plt.XLabel = "Time t"; plt.YLabel = "Solution y"; plt.Show(); </code>
<image href="../graphics/Ode45 Vander Pole.png"/>
</example>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Ode15i(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.ValueTuple{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)">
<summary> Integrates a system of implicit ordinary differential equations using Adaptive Trapezoidal Method </summary>
<param name="fun">function of system of first order differentiation</param>
<param name="initcon">initial condition y(tspan[0])</param>
<param name="tspan">interval of integration</param>
<param name="options">(Optional) integraion procedure settings such as: maximum iteration number, initial step fraction, maximum step fraction and display setting</param>
<returns>Ode.Result containing a ColVec for X and a Matrix for Y</returns>
<example>
$$ y'_1 = y_1y_3 - y_2 $$ $$ y'_2 = y_1 - 1 $$ $$ y'_3 = y_1 + y_2 + y_3 $$
<code> using CypherCrescent.MathematicsLibrary; using static MathsChart.Chart; ColVec dydt(double t, ColVec y) => new double[] { y[0] * y[2] - y[1], y[0] - 1, y[0] + y[1] + y[2] }; Ode.Result TY = Ode.Ode15t(dydt, [ 1, 1, -2 ], [ 0, 10 ]); var plt = Plot(TY.X, TY.Y, "-o"); plt.XLabel = "Time t"; plt.YLabel = "Solution y"; plt.Show(); </code>
<image href="../graphics/Ode45 Vander Pole.png"/>
</example>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Dae15(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix},System.Double[],System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)">
<summary> Integrates a system of stiff ordinary differential algrebraic equations using Adaptive Trapezoidal Method </summary>
<param name="fun">function of system of first order differentiation</param>
<param name="Mass"/>
<param name="initcon">initial condition y(tspan[0])</param>
<param name="tspan">interval of integration</param>
<param name="options">(Optional) integraion procedure settings such as: maximum iteration number, initial step fraction, maximum step fraction and display setting</param>
<returns>Ode.Result containing a ColVec for X and a Matrix for Y</returns>
<example>
$$ y'_1 = y_1y_3 - y_2 $$ $$ y'_2 = y_1 - 1 $$ $$ 0 = y_1 + y_2 + y_3 $$
<code> using CypherCrescent.MathematicsLibrary; using static MathsChart.Chart; ColVec dydt(double t, ColVec y) => new double[] { y[0] * y[2] - y[1], y[0] - 1, y[0] + y[1] + y[2] }; Matrix Mass(double t, ColVec y) => new double[,]{ {1, 0, 0}, {0, 1, 0}, {0, 0, 0} }; Ode.Result TY = Ode.Dae10(dydt, Mass, [ 1, 1, -2 ], [ 0, 10 ]); var plt = Plot(TY.X, TY.Y, "-o"); plt.Title = "Solution of a DAE (mu = 1) with DAE10t"; plt.XLabel = "Time t"; plt.YLabel = "Solution y"; plt.Show(); </code>
<image href="../graphics/Ode45 Vander Pole.png"/>
</example>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Dae12(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix},System.Double[],System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)">
<summary> Integrates a system of stiff ordinary differential algrebraic equations using Adaptive Implicit Euler Method </summary>
<param name="fun"/>
<param name="Mass"/>
<param name="initcon"/>
<param name="tspan"/>
<param name="options">(Optional) integraion procedure settings such as: maximum iteration number, initial step fraction, maximum step fraction and display setting</param>
<returns>Ode.Result containing a ColVec for X and a Matrix for Y</returns>
<example>
$$ y'_1 = y_1y_3 - y_2 $$ $$ y'_2 = y_1 - 1 $$ $$ 0 = y_1 + y_2 + y_3 $$
<code> using CypherCrescent.MathematicsLibrary; using static MathsChart.Chart; ColVec dydt(double t, ColVec y) => new double[] { y[0] * y[2] - y[1], y[0] - 1, y[0] + y[1] + y[2] }; Matrix Mass(double t, ColVec y) => new double[,]{ {1, 0, 0}, {0, 1, 0}, {0, 0, 0} }; Ode.Result TY = Ode.Dae10(dydt, Mass, [ 1, 1, -2 ], [ 0, 10 ]); var plt = Plot(TY.X, TY.Y, "-o"); plt.Title = "Solution of a DAE (mu = 1) with DAE10t"; plt.XLabel = "Time t"; plt.YLabel = "Solution y"; plt.Show(); </code>
<image href="../graphics/Ode45 Vander Pole.png"/>
</example>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Ode12s(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double[],System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)">
<summary> Integrates a system of stiff ordinary differential algrebraic equations using Adaptive Implicit Euler Method </summary>
<param name="dydx"/>
<param name="initcon"/>
<param name="tspan"/>
<param name="options">(Optional) integraion procedure settings such as: maximum iteration number, initial step fraction, maximum step fraction and display setting</param>
<returns>Ode.Result containing a ColVec for X and a Matrix for Y</returns>
<example>
$$ y'_1 = y_1y_3 - y_2 $$ $$ y'_2 = y_1 - 1 $$ $$ 0 = y_1 + y_2 + y_3 $$
<code> using CypherCrescent.MathematicsLibrary; using static MathsChart.Chart; ColVec dydt(double t, ColVec y) => new double[] { y[0] * y[2] - y[1], y[0] - 1, y[0] + y[1] + y[2] }; Ode.Result TY = Ode.Dae10(dydt, [ 1, 1, -2 ], [ 0, 10 ]); var plt = Plot(TY.X, TY.Y, "-o"); plt.Title = "Solution of a DAE (mu = 1) with DAE10t"; plt.XLabel = "Time t"; plt.YLabel = "Solution y"; plt.Show(); </code>
<image href="../graphics/Ode45 Vander Pole.png"/>
</example>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Dae45(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix},System.Double[],System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)">
<summary> Integrates a system of stiff ordinary differential algrebraic equations using Adaptive Implicit Euler Method </summary>
<param name="fun"/>
<param name="Mass"/>
<param name="initcon"/>
<param name="tspan"/>
<param name="options">(Optional) integraion procedure settings such as: maximum iteration number, initial step fraction, maximum step fraction and display setting</param>
<returns>Ode.Result containing a ColVec for X and a Matrix for Y</returns>
<example>
$$ y'_1 = y_1y_3 - y_2 $$ $$ y'_2 = y_1 - 1 $$ $$ 0 = y_1 + y_2 + y_3 $$
<code> using CypherCrescent.MathematicsLibrary; using static MathsChart.Chart; ColVec dydt(double t, ColVec y) => new double[] { y[0] * y[2] - y[1], y[0] - 1, y[0] + y[1] + y[2] }; Matrix Mass(double t, ColVec y) => new double[,]{ {1, 0, 0}, {0, 1, 0}, {0, 0, 0} }; Ode.Result TY = Ode.Dae10(dydt, Mass, [ 1, 1, -2 ], [ 0, 10 ]); var plt = Plot(TY.X, TY.Y, "-o"); plt.Title = "Solution of a DAE (mu = 1) with DAE10t"; plt.XLabel = "Time t"; plt.YLabel = "Solution y"; plt.Show(); </code>
<image href="../graphics/Ode45 Vander Pole.png"/>
</example>
</member>
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.Ode.Ode45s(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double[],System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)"  -->
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Ode45i(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.ValueTuple{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)">
<summary> Integrates a system of Implicit ordinary differential algrebraic equations using Adaptive Diagonally Implicit RungKutta of order 4 and 5 </summary>
<param name="fun"/>
<param name="Mass"/>
<param name="initcon"/>
<param name="tspan"/>
<param name="options">(Optional) integraion procedure settings such as: maximum iteration number, initial step fraction, maximum step fraction and display setting</param>
<returns>Ode.Result containing a ColVec for X and a Matrix for Y</returns>
<example>
$$ y'_1 = y_1y_3 - y_2 $$ $$ y'_2 = y_1 - 1 $$ $$ 0 = y_1 + y_2 + y_3 $$
<code> using CypherCrescent.MathematicsLibrary; using static MathsChart.Chart; ColVec dydt(double t, ColVec y) => new double[] { y[0] * y[2] - y[1], y[0] - 1, y[0] + y[1] + y[2] }; Matrix Mass(double t, ColVec y) => new double[,]{ {1, 0, 0}, {0, 1, 0}, {0, 0, 0} }; Ode.Result TY = Ode.Dae10(dydt, Mass, [ 1, 1, -2 ], [ 0, 10 ]); var plt = Plot(TY.X, TY.Y, "-o"); plt.Title = "Solution of a DAE (mu = 1) with DAE10t"; plt.XLabel = "Time t"; plt.YLabel = "Solution y"; plt.Show(); </code>
<image href="../graphics/Ode45 Vander Pole.png"/>
</example>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.Ode45i(System.Func{System.Double,System.Double,System.Double,System.Double},System.ValueTuple{System.Double,System.Double},System.Double[],CypherCrescent.MathematicsLibrary.Ode.Set)">
<summary> Integrates a system of Implicit ordinary differential algrebraic equations using Adaptive Diagonally Implicit RungKutta of order 4 and 5 </summary>
<param name="fun"/>
<param name="Mass"/>
<param name="initcon"/>
<param name="tspan"/>
<param name="options">(Optional) integraion procedure settings such as: maximum iteration number, initial step fraction, maximum step fraction and display setting</param>
<returns>Ode.Result containing a ColVec for X and a Matrix for Y</returns>
<example>
$$ y'_1 = y_1y_3 - y_2 $$ $$ y'_2 = y_1 - 1 $$ $$ 0 = y_1 + y_2 + y_3 $$
<code> using CypherCrescent.MathematicsLibrary; using static MathsChart.Chart; ColVec dydt(double t, ColVec y) => new double[] { y[0] * y[2] - y[1], y[0] - 1, y[0] + y[1] + y[2] }; Matrix Mass(double t, ColVec y) => new double[,]{ {1, 0, 0}, {0, 1, 0}, {0, 0, 0} }; Ode.Result TY = Ode.Dae10(dydt, Mass, [ 1, 1, -2 ], [ 0, 10 ]); var plt = Plot(TY.X, TY.Y, "-o"); plt.Title = "Solution of a DAE (mu = 1) with DAE10t"; plt.XLabel = "Time t"; plt.YLabel = "Solution y"; plt.Show(); </code>
<image href="../graphics/Ode45 Vander Pole.png"/>
</example>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Ode.CheckIndex(System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{System.Double,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix},System.Double[],System.Double)">
<summary> </summary>
<param name="fun"/>
<param name="Mass"/>
<param name="initcon"/>
<param name="t0"/>
<returns/>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.CallbackIter">
<summary> </summary>
<param name="mat"/>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.CallbackRedundancy">
<summary> </summary>
<param name="i"/>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Optimizers">
<summary> Class of Optimization Algorithms </summary>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Optimizers.Set">
<summary> Contains Setting for the Solvers and Optimization Proceedure </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.PerturbationExponent">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.AccuracyHigh">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.MaxIter">
<summary> Maximum number of iteration allowed </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.PopulationSize">
<summary> Number of Particles </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.MaxFunEvals">
<summary> Maximum number of function evaluation allowed </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.LevenbergeMarquardt_UpdateType">
<summary> Update for Levenberge Marquardt:= 1: Levenberg-Marquardt lambda update, 2: Quadratic update , 3: Nielsen's lambda update equations </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.LinProg_Method">
<summary> Method used for the solution of Linear program </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.QuadProg_Method">
<summary> Method used for the solution of Quadratic program </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.DualActiveSetUpdate_Method">
<summary> Method used for the solution of Quadratic program </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.Tol">
<summary> convergence tolerance for parameters </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.OptimalityTol">
<summary> convergence tolerance for gradients </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.Chi_sqTol">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.StepTol">
<summary> convergence tolerance for parameters </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.ResnormTol">
<summary> convergence tolerance for residual </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.FuncTol">
<summary> convergence tolerance for function </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.ConstraintTol">
<summary> constraint tolerance </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.Learning_rate">
<summary> determines the rate at which the position of the parameter is being updated </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.Weight">
<summary> Weight of each measurement. to detemine relative importance of each measurement </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.tau">
<summary> initial value of L-M paramter </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.mu_up_fac">
<summary> factor for increasing mu </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.mu_dn_fac">
<summary> factor for decreasing mu </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.Penalty">
<summary> Penalty factor for Violation of Constraints </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.Display">
<summary> Controls Console Display during iteration </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.AffineTheta">
<summary> Controls the rate of update in interior point method </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.DecisionType">
<summary> Tells the algorithm whether decision variables are binary not </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.CurveFitting_Method">
<summary> Tells Paramfit the type of algorithm to use. </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.ans">
<summary> Captures the summary of the computation and the result </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.Pltfun">
<summary> plot function for the state of the computation </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.MaxStallIterations">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Set.IntVar">
<summary> </summary>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Optimizers.Result">
<summary> Holds the result of calls to the optimizer class. Implicitly convertes to the class of the expected result </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.Sol">
<summary> Holds the solution of the current problem </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.StepSize">
<summary> Holds the solution of the current problem </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.EqCon">
<summary> Holds the solution of the current problem </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.InEqCon">
<summary> Holds the solution of the current problem </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.Residual">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.Resnorm">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.BestNSol">
<summary> Holds the best n solution from Particle Swam </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.BestNFval">
<summary> Holds the best n func values from Particle Swam </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.Iter">
<summary> Holds the number of iteration used in the computation </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.FunVal">
<summary> Holds the current value of the function at the exit of the computation </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.FunEvals">
<summary> Holds the number of function evaluation used in the computation </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.Corr_p">
<summary> Holds correlation matrix of the parameters </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.Covar_p">
<summary> Holds covariance matrix of the parameters </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.Sigma_p">
<summary> Asymptotic standard error of the parameters </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.Sigma_y">
<summary> Asymptotic standard error of the curve-fit </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.R_sq">
<summary> R-squared coefficient of the multiple determination </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.RedX2">
<summary> Reduced Chi-squared error criteria- should be close to 1 </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.dFp">
<summary> Last change in Resnomm </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.Cvg_hist">
<summary> Convergence history </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.IsMinimized">
<summary> States whether the function is minimized or not </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.Jacobian">
<summary> Jacobian of the vector function at exit of computation </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.Hessian">
<summary> Hessian of scaler function at the exit of computation </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.Problem">
<summary> States whether a problem is the primal, dual or combined (interior point method) </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.mu">
<summary> primal-dual gap in interior point method </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.Tableau">
<summary> Tabeau of simplex method for linear programming </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.EqMultiplier">
<summary> Langrange multipliers of the Equality constraints </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.InEqMultiplier">
<summary> Langrange multipliers of the Inequality constraints </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.Message">
<summary> Message from Optimization </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Optimizers.Result.Warnings">
<summary> </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.Result.#ctor">
<summary> Constructor of OptimizerResult </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.Result.ToString">
<summary> Function returns OptimizerResults as a string </summary>
<returns>String from the array</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.Result.op_Implicit(CypherCrescent.MathematicsLibrary.Optimizers.Result)~CypherCrescent.MathematicsLibrary.ColVec">
<summary> Implicit operator for conversion from OptimizerResults to Matrix </summary>
<param name="value">Matrix to be converted to double array</param>
<returns>array of double</returns>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Optimizers.IterationState">
<summary> </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.BFGS(System.Func{CypherCrescent.MathematicsLibrary.ColVec,System.Double},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> </summary>
<param name="func"/>
<param name="x0"/>
<param name="guide"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.ParamFit(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Evaluates paramters that fit a model to measured data </summary>
<param name="Model">function that defines the model</param>
<param name="x0">Vector of initial guess (matrix data type)</param>
<param name="IndVar">Independent variable</param>
<param name="Measured">Vector of meaured data(Matrix data type)</param>
<param name="funInEq">Iniequality constraint</param>
<param name="funEq">Equality constraint</param>
<param name="lb">Lower bound</param>
<param name="ub">Upper bound</param>
<param name="guide">Optimizers setting</param>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.ParamFit(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Evaluates paramters that fit a model to measured data </summary>
<param name="Model">function that defines the model</param>
<param name="x0">Vector of initial guess (matrix data type)</param>
<param name="IndVar">Independent variable</param>
<param name="Measured">Vector of meaured data(Matrix data type)</param>
<param name="funInEq">Iniequality constraint</param>
<param name="funEq">Equality constraint</param>
<param name="lb">Lower bound</param>
<param name="ub">Upper bound</param>
<param name="guide">Optimizers setting</param>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.ParamFit(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Evaluates paramters that fit a model to measured data </summary>
<param name="Model">function that defines the model</param>
<param name="x0">Vector of initial guess (matrix data type)</param>
<param name="Measured">Vector of meaured data(Matrix data type)</param>
<param name="funInEq">Iniequality constraint</param>
<param name="funEq">Equality constraint</param>
<param name="lb">Lower bound</param>
<param name="ub">Upper bound</param>
<param name="guide">Optimizers setting</param>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.FminCon(System.Func{CypherCrescent.MathematicsLibrary.ColVec,System.Double},CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Computes the minimizer in [lowerbound, upperbound] for an equality(funCEq) and/or Inequality(funCInEq) constrained scalar function (fun) starting with an initiaL guess x0. </summary>
<param name="fun">function to be minismized</param>
<param name="x0">Initial guess</param>
<param name="funCInEq">Multivariate Vector Function of Inequality Constrain</param>
<param name="funCEq">Multivariate Vector Function of Equality Constrian</param>
<param name="lowerbound">Lower bound set to -infinity if not given</param>
<param name="upperbound">Upper bound set to infinity if not given</param>
<returns>Minimizer Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.ParticleSwarm(System.Func{CypherCrescent.MathematicsLibrary.ColVec,System.Double},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Estimates Parameters that fits a model to measured data using Particle swarm optimization </summary>
<param name="Model">Model whose parameters is to be estimated</param>
<param name="Measured">Measured data</param>
<param name="t">Independent variable</param>
<param name="funInEq">Inequality constraint(Can be set to null)</param>
<param name="funEq">Equality constraint (Can be set to null)</param>
<param name="lb">Lower bound</param>
<param name="ub">Upper bound</param>
<param name="guide"/>
<returns>Optimizer Result containing the minimizer</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.ParticleSwarm(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Estimates Parameters that fits a model to measured data using Particle swarm optimization </summary>
<param name="Model">Model whose parameters is to be estimated</param>
<param name="Measured">Measured data</param>
<param name="t">Independent variable</param>
<param name="funInEq">Inequality constraint(Can be set to null)</param>
<param name="funEq">Equality constraint (Can be set to null)</param>
<param name="lb">Lower bound</param>
<param name="ub">Upper bound</param>
<param name="guide"/>
<returns>Optimizer Result containing the minimizer</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.ParticleSwarm(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Estimates Parameters that fits a model to measured data using Particle swarm optimization </summary>
<param name="Model">Model whose parameters is to be estimated</param>
<param name="IndVar">Independent variable</param>
<param name="Measured">Measured data</param>
<param name="funInEq">Inequality constraint(Can be set to null)</param>
<param name="funEq">Equality constraint (Can be set to null)</param>
<param name="lb">Lower bound</param>
<param name="ub">Upper bound</param>
<param name="guide"/>
<returns>Optimizer Result containing the minimizer</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.ParticleSwarm(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Estimates Parameters that fits a model to measured data using Particle swarm optimization </summary>
<param name="Model">Model whose parameters is to be estimated</param>
<param name="IndVar">Independent variable</param>
<param name="Measured">Measured data</param>
<param name="funInEq">Inequality constraint(Can be set to null)</param>
<param name="funEq">Equality constraint (Can be set to null)</param>
<param name="lb">Lower bound</param>
<param name="ub">Upper bound</param>
<param name="guide"/>
<returns>Optimizer Result containing the minimizer</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.GeneticAlgorithm(System.Func{CypherCrescent.MathematicsLibrary.ColVec,System.Double},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.Indexer,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> </summary>
<param name="fun"/>
<param name="funInEq"/>
<param name="funEq"/>
<param name="IntIndx"/>
<param name="lb"/>
<param name="ub"/>
<param name="guide"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.GeneticAlgorithm(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Estimates Parameters that fits a model to measured data using Genetic Algorithm </summary>
<param name="Model">Model whose parameters is to be estimated</param>
<param name="Measured">Measured data</param>
<param name="funInEq">Inequality constraint(Can be set to null)</param>
<param name="funEq">Equality constraint (Can be set to null)</param>
<param name="lb">Lower bound</param>
<param name="ub">Upper bound</param>
<param name="guide"/>
<returns>Optimizer Result containing the minimizer</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.GeneticAlgorithm(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Estimates Parameters that fits a model to measured data using Genetic Algorithm </summary>
<param name="Model">Model whose parameters is to be estimated</param>
<param name="Measured">Measured data</param>
<param name="IndVar">Independent variable</param>
<param name="funInEq">Inequality constraint(Can be set to null)</param>
<param name="funEq">Equality constraint (Can be set to null)</param>
<param name="lb">Lower bound</param>
<param name="ub">Upper bound</param>
<param name="guide"/>
<returns>Optimizer Result containing the minimizer</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.GeneticAlgorithm(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Estimates Parameters that fits a model to measured data using Genetic Algorithm </summary>
<param name="Model">Model whose parameters is to be estimated</param>
<param name="Measured">Measured data</param>
<param name="IndVar">Independent variable</param>
<param name="funInEq">Inequality constraint(Can be set to null)</param>
<param name="funEq">Equality constraint (Can be set to null)</param>
<param name="lb">Lower bound</param>
<param name="ub">Upper bound</param>
<param name="guide"/>
<returns>Optimizer Result containing the minimizer</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.NelderMead(System.Func{CypherCrescent.MathematicsLibrary.ColVec,System.Double},CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> </summary>
<param name="fun"/>
<param name="x0"/>
<param name="funInEq"/>
<param name="funEq"/>
<param name="Lb"/>
<param name="Ub"/>
<param name="guide"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.NelderMeadFit(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> </summary>
<param name="fun"/>
<param name="x0"/>
<param name="Measured"/>
<param name="funInEq"/>
<param name="funEq"/>
<param name="Lb"/>
<param name="Ub"/>
<param name="guide"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.NelderMeadFit(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> </summary>
<param name="fun"/>
<param name="x0"/>
<param name="IndVar"/>
<param name="Measured"/>
<param name="funInEq"/>
<param name="funEq"/>
<param name="Lb"/>
<param name="Ub"/>
<param name="guide"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.NelderMeadFit(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> </summary>
<param name="fun"/>
<param name="x0"/>
<param name="IndVar"/>
<param name="Measured"/>
<param name="funInEq"/>
<param name="funEq"/>
<param name="Lb"/>
<param name="Ub"/>
<param name="guide"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.LevenbergeMarquardt(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Levenberg Marquardt curve-fitting: minimize sum of weighted squared residuals </summary>
<param name="Model">function of n parameters, 'p', returning the simulated model: y_hat = func(p)</param>
<param name="x0">n-vector of initial guess of parameter values</param>
<param name="Measured">m-vectors or matrix of data to be fit by fun(p)</param>
<param name="funInEq">Inequality constraint(Can be set to null)</param>
<param name="funEq">Equality constraint (Can be set to null)</param>
<param name="lb">n-vector of lower bounds for parameter values</param>
<param name="ub">n-vector of upper bounds for parameter values</param>
<param name="guide">Optimization setting.</param>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.LevenbergeMarquardt(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Estimates Parameters that fits a model to measured data using Levenberg-Maquardt Optimization </summary>
<param name="Model">Model whose parameters is to be estimated</param>
<param name="x0"/>
Initial guess
<param name="IndVar">Independent variable</param>
<param name="Measured">Measured data</param>
<param name="funInEq">Inequality constraint(Can be set to null)</param>
<param name="funEq">Equality constraint (Can be set to null)</param>
<param name="lb">Lower bound</param>
<param name="ub">Upper bound</param>
<param name="guide"/>
<returns>Optimizer Result containing the minimizer</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.LevenbergeMarquardt(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Estimates Parameters that fits a model to measured data using Levenberg-Maquardt Optimization </summary>
<param name="Model">Model whose parameters is to be estimated</param>
<param name="x0"/>
Initial guess
<param name="IndVar">Independent variable</param>
<param name="Measured">Measured data</param>
<param name="funInEq">Inequality constraint(Can be set to null)</param>
<param name="funEq">Equality constraint (Can be set to null)</param>
<param name="lb">Lower bound</param>
<param name="ub">Upper bound</param>
<param name="guide"/>
<returns>Optimizer Result containing the minimizer</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.Powell(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Levenberg Marquardt curve-fitting: minimize sum of weighted squared residuals </summary>
<param name="Model">function of n parameters, 'p', returning the simulated model: y_hat = func(p)</param>
<param name="x0">n-vector of initial guess of parameter values</param>
<param name="Measured">m-vectors or matrix of data to be fit by fun(p)</param>
<param name="funInEq">Inequality constraint(Can be set to null)</param>
<param name="funEq">Equality constraint (Can be set to null)</param>
<param name="lb">n-vector of lower bounds for parameter values</param>
<param name="ub">n-vector of upper bounds for parameter values</param>
<param name="guide">Optimization setting.</param>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.Powell(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Estimates Parameters that fits a model to measured data using Levenberg-Maquardt Optimization </summary>
<param name="Model">Model whose parameters is to be estimated</param>
<param name="x0"/>
Initial guess
<param name="IndVar">Independent variable</param>
<param name="Measured">Measured data</param>
<param name="funInEq">Inequality constraint(Can be set to null)</param>
<param name="funEq">Equality constraint (Can be set to null)</param>
<param name="lb">Lower bound</param>
<param name="ub">Upper bound</param>
<param name="guide"/>
<returns>Optimizer Result containing the minimizer</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.Powell(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Estimates Parameters that fits a model to measured data using Levenberg-Maquardt Optimization </summary>
<param name="Model">Model whose parameters is to be estimated</param>
<param name="x0"/>
Initial guess
<param name="IndVar">Independent variable</param>
<param name="Measured">Measured data</param>
<param name="funInEq">Inequality constraint(Can be set to null)</param>
<param name="funEq">Equality constraint (Can be set to null)</param>
<param name="lb">Lower bound</param>
<param name="ub">Upper bound</param>
<param name="guide"/>
<returns>Optimizer Result containing the minimizer</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.SeqQuadProg(System.Func{CypherCrescent.MathematicsLibrary.ColVec,System.Double},CypherCrescent.MathematicsLibrary.ColVec,System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Computes minimizers of a scalar function using Seqential Quadratic Programming </summary>
<param name="fun">Multivariate scalar function to be minimized</param>
<param name="x0">Initial guess</param>
<param name="funCInEq">Inequality constraint(Can be set to null)</param>
<param name="funCEq">Equality constraint (Can be set to null)</param>
<param name="lb">Lowerbound</param>
<param name="ub">Upperbound</param>
<param name="guide"/>
<returns>ColVec of Minimizer</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.QuadInterp(System.Func{System.Double,System.Double})">
<summary> Computed the minimum of a univariate scalar function using quadratic interpolation </summary>
<param name="fun">Function to be minimized</param>
<returns>Mimimum point</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.Corcoef(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Correlation coefficient value between Matrix A and B. </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.CompressedLinProgHighs(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Int32[],System.Int32[],System.Double[],CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> </summary>
<param name="cc"/>
<param name="cl"/>
<param name="cu"/>
<param name="rl"/>
<param name="ru"/>
<param name="astart"/>
<param name="aindex"/>
<param name="avalue"/>
<param name="guide"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.LinProg(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Simplex method: Compute the minimzer of a linear function with Inequality, Equality linear constrants </summary>
<param name="c">Row Vector representing function to be minimized 'f = c1*x1 + c2*x2 + c3*x3.....cn*xn'</param>
<param name="AInEq"> Matrix A in "Ax less than b" </param>
<param name="bInEq"> Vector b in "Ax less than b" </param>
<param name="AEq">Matrix A in "Ax equal to b"</param>
<param name="bEq">Vector b in "Ax equal to b"</param>
<param name="Lb">Vector Lb is the lowerbound of x"</param>
<param name="Ub">Vector Ub is the upperbound of x"</param>
<param name="guide">Optimizer setting</param>
<returns>An Optimizer result object which can implicitly convert to x</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.MixIntLinProg(CypherCrescent.MathematicsLibrary.RowVec,System.Int32[],CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Simplex method: Compute the minimzer of a linear function with Inequality, Equality linear constrants </summary>
<param name="c">Row Vector representing function to be minimized 'f = c1*x1 + c2*x2 + c3*x3.....cn*xn'</param>
<param name="IntVar">Index of Interger Variables</param>
<param name="AInEq"> Matrix A in "Ax less than b" </param>
<param name="bInEq"> Vector b in "Ax less than b" </param>
<param name="AEq">Matrix A in "Ax equal to b"</param>
<param name="bEq">Vector b in "Ax equal to b"</param>
<param name="Lb">Vector Lb is the lowerbound of x"</param>
<param name="Ub">Vector Ub is the upperbound of x"</param>
<param name="guide">Optimizer setting</param>
<returns>An Optimizer result object which can implicitly convert to x</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.Deletionfilter(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Boolean[],System.Boolean[])">
<summary> </summary>
<param name="AInEq"/>
<param name="bInEq"/>
<param name="AEq"/>
<param name="bEq"/>
<param name="Lb"/>
<param name="Ub"/>
<param name="ineq_iis"/>
<param name="eq_iis"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.PolyFit(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Int32)">
<summary> Computes coefficients of Polynomials of Order N that fits given set of X and Y data to Y = a_{n}x^{n} + a_{n-1}x^{n-1} + a_{n-1}x^{n-1} + a_{n-1}x^{n-1}.....+ a_{1}x + a_{0} </summary>
<param name="X">Matrix (M,1) </param>
<param name="Y">Matrix (M,1) </param>
<param name="N">Degree of the Polynomial </param>
<returns>Matrix (N + 1, 1) Coefficients of the polynomial a_{n}, a_{n - 1} ....a_{0}</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.ExponentialFit(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Computes coefficients of an Exponential function that fits given set of X and Y data to Y = a_{1}*e^(a_{0}X) </summary>
<param name="X">Matrix (M,1)</param>
<param name="Y">Matrix (M,1)</param>
<returns> Matrix (2,1) Containing a_{0} and a_{1}</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.LinearFit(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Computes coefficients of straightline that fits given set of X and Y data to Y = a_{0}x + a_{1} </summary>
<param name="X">Matrix (M,1)</param>
<param name="Y">Matrix (M,1)</param>
<returns> Matrix (2,1) Containing a_{0} and a_{1}</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.PowerFit(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Computes coefficients of an Power function that fits given set of X and Y data to Y = a_{1}*X^{a_{0}} </summary>
<param name="X">Matrix (M,1)</param>
<param name="Y">Matrix (M,1)</param>
<returns>Matrix (2,1) Containing a_{0} and a_{1}</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.LogarithmFit(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Computes coefficients of an Logarithm function that fits given set of X and Y data to Y = a_{0}Ln(X) + a_{1} </summary>
<param name="X">Matrix (M,1)</param>
<param name="Y">Matrix (M,1)</param>
<returns>Matrix (2,1) Containing a_{0} and a_{1}</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.Trend(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.TrendType)">
<summary> This computes the trend using Y = a_{1}*e^(a_{0}X) for Exponential law Y = a_{1}*X^(a_{0}) for Power Law Y = a_{1} + X*a_{0} for Linear Law Y = a_{1} + a_{0}*Ln(X) for Logarithmic Law Y = a_{0}*X^n + a_{1}*X^{n-1} ...... a_n*X + a_{n+1} for Poly Fit </summary>
<param name="X"/>
<param name="Param"/>
<param name="trendtype"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.QuinticSpline(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix,System.Double)">
<summary> Computes Quintic Spline Interpolation based on 3 measured points and slopes </summary>
<param name="X">Matrix (3, 1) values of x (Matrix data type)</param>
<param name="Y">Matrix (3, N) values of Y</param>
<param name="M">Matrix (3, N) values of slopes M</param>
<returns>Matrix (1, N) corresponding to interpolation for each column of Y</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.CubicSpline(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Computes Cubic Spline Interpolation based on 2 measured points and slopes </summary>
<param name="X">Matrix (2, 1) values of x (Matrix data type)</param>
<param name="Y">Matrix (2, N) values of Y</param>
<param name="M">Matrix (2, N) values of slopes M</param>
<returns>Matrix (1, N) corresponding to interpolation for each column of Y</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.HermiteCubicSpline(CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Computes Cubic Spline Interpolation based on 2 measured points and slopes </summary>
<param name="X">Matrix (2, 1) values of x (Matrix data type)</param>
<param name="Y">Matrix (2, N) values of Y</param>
<param name="M">Matrix (2, N) values of slopes M</param>
<returns>Matrix (1, N) corresponding to interpolation for each column of Y</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.HermiteCubicSpline(System.Double,System.Double,CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Computes Cubic Spline Interpolation based on 2 measured points and slopes </summary>
<param name="x0"/>
<param name="x1"/>
<param name="y0"/>
<param name="y1"/>
<param name="m0"/>
<param name="m1"/>
<param name="x"/>
<returns>corresponding to interpolation for each column of y </returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.Grad(System.Func{CypherCrescent.MathematicsLibrary.ColVec,System.Double},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Returns the gradient of a scaler multivariate function with respect to its variable </summary>
<param name="fun">Multivariate Scaler function</param>
<param name="x">Column Matrix of varaible valuesat which the gradient is to be computed</param>
<returns>Column Matrix of partial derivatives of the function with respect to the varaibles</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.Hessian(System.Func{CypherCrescent.MathematicsLibrary.ColVec,System.Double},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Returns the second derivative of a scaler multivariate function with respect to its variable </summary>
<param name="fun">Multivariate Scaler function</param>
<param name="x">Column Matrix of varaible valuesat which the gradiate is to be computed</param>
<returns>Matrix of second order partial derivatives of the function with respect to the varaibles</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.Jacobian(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Returns a Matrix of gradient of a multivariate Vector function with respect to its variable </summary>
<param name="fun">Multivariate Vector function</param>
<param name="x">Column Matrix of varaible valuesat which the gradiate is to be computed</param>
<returns>Matrix of first order partial derivatives of the function with respect to the varaibles</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.Diff1(System.Func{System.Double,System.Double},System.Double,System.Double,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Returns the first order forward derivative of a scaler function </summary>
<param name="fun">Univariate Scaler function</param>
<param name="X">varaible value at which the gradiate is to be computed</param>
<returns>double of derivative of the function with respect to the varaible</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.Diff2(System.Func{System.Double,System.Double},System.Double,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Returns the second order deraivative of a scaler function </summary>
<param name="fun">Univariate Scaler function</param>
<param name="X">varaible value at which the gradiate is to be computed</param>
<param name="accuracyhigh">State whether or not to use highaccuracy scheme</param>
<returns>double of fourth order derivative of the function with respect to the varaible</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.Diff3(System.Func{System.Double,System.Double},System.Double,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Returns the third order deraivative of a scaler function </summary>
<param name="fun">Univariate Scaler function</param>
<param name="X">varaible value at which the gradiate is to be computed</param>
<param name="accuracyhigh">State whether or not to use highaccuracy scheme</param>
<returns>double of fourth order derivative of the function with respect to the varaible</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Optimizers.Diff4(System.Func{System.Double,System.Double},System.Double,CypherCrescent.MathematicsLibrary.Optimizers.Set)">
<summary> Returns the fourth order deraivative of a scaler function </summary>
<param name="fun">Univariate Scaler function</param>
<param name="X">varaible value at which the gradiate is to be computed</param>
<param name="accuracyhigh">State whether or not to use highaccuracy scheme</param>
<returns>double of fourth order derivative of the function with respect to the varaible</returns>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.PermIndexer.T">
<summary> Returns the Transpose of an Indexer(Inverse of Indexer) </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.PermIndexer.op_Implicit(System.Int32[])~CypherCrescent.MathematicsLibrary.PermIndexer">
<summary> </summary>
<param name="value"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.PermIndexer.op_Implicit(System.Collections.Generic.List{System.Int32})~CypherCrescent.MathematicsLibrary.PermIndexer">
<summary> </summary>
<param name="value"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.PermIndexer.op_Implicit(System.Boolean[])~CypherCrescent.MathematicsLibrary.PermIndexer">
<summary> </summary>
<param name="value"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.PermIndexer.op_Implicit(System.Boolean[0:,0:])~CypherCrescent.MathematicsLibrary.PermIndexer">
<summary> </summary>
<param name="value"/>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Polynomials">
<summary> Computes the roots of a polynomial defined by its coefficient from the highest degree to the least </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Polynomials.Roots(System.Double[])">
<summary> Computes roots of a polynomial with real coefficients </summary>
<param name="Coeffs">coefficients of the polynomial</param>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Polynomials.Roots(CypherCrescent.MathematicsLibrary.Complex[])">
<summary> Computes roots of a polynomial with complex coefficients </summary>
<param name="Coeffs">coefficients of the polynomial</param>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Polynomials.DeConv(System.Double[],System.Double[],System.Double[]@,System.Double[]@)">
<summary> Computes Deconvolution of a polynomial by another (real) </summary>
<param name="Coeffs_a">polynomial to be divided</param>
<param name="Coeffs_d">polynomial divisor</param>
<param name="Coeffs_q">polynomial quotient</param>
<param name="Coeffs_r">polynomial remainder</param>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Polynomials.DeConv(CypherCrescent.MathematicsLibrary.Complex[],CypherCrescent.MathematicsLibrary.Complex[],CypherCrescent.MathematicsLibrary.Complex[]@,CypherCrescent.MathematicsLibrary.Complex[]@)">
<summary> Computes Deconvolution of a polynomial by another (Complex) </summary>
<param name="Coeffs_a">polynomial to be divided</param>
<param name="Coeffs_d">polynomial divisor</param>
<param name="Coeffs_q">polynomial quotient</param>
<param name="Coeffs_r">polynomial remainder</param>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Polynomials.PolyVal(System.Double[],System.Double)">
<summary> Polynomial Evaluator (real at a real point) </summary>
<param name="Coeffs_a">polynomial coefficient</param>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Polynomials.PolyVal(System.Double[],CypherCrescent.MathematicsLibrary.Complex)">
<summary> Polynomial Evaluator (real at a complex point) </summary>
<param name="Coeffs_a">polynomial coefficient</param>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Polynomials.PolyVal(CypherCrescent.MathematicsLibrary.Complex[],CypherCrescent.MathematicsLibrary.Complex)">
<summary> Polynomial Evaluator (complex at a complex point) </summary>
<param name="Coeffs_a">polynomial coefficient</param>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Polynomials.Conv(System.Double[],System.Double[],System.Double[]@)">
<summary> Polynomial convolution (real) </summary>
<param name="Coeffs_p1"/>
<param name="Coeffs_p2"/>
<param name="Coeffs_p"/>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.RowVec">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.RowVec.T">
<summary> </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.#ctor(System.Collections.Generic.List{System.Double})">
<summary> </summary>
<param name="entry"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.#ctor(System.Double[])">
<summary> </summary>
<param name="entry"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
<summary> </summary>
<param name="entry"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Implicit(System.Double[])~CypherCrescent.MathematicsLibrary.RowVec">
<summary> </summary>
<param name="mat"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Implicit(System.Collections.Generic.List{System.Double})~CypherCrescent.MathematicsLibrary.RowVec">
<summary> </summary>
<param name="mat"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Implicit(System.Double)~CypherCrescent.MathematicsLibrary.RowVec">
<summary> </summary>
<param name="mat"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Implicit(System.Collections.Generic.List{CypherCrescent.MathematicsLibrary.RowVec})~CypherCrescent.MathematicsLibrary.RowVec">
<summary> </summary>
<param name="mat"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Implicit(System.Collections.Generic.List{CypherCrescent.MathematicsLibrary.Matrix})~CypherCrescent.MathematicsLibrary.RowVec">
<summary> </summary>
<param name="mat"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.Duplicate">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.ArrayEval(System.Func{System.Double,System.Double})">
<summary> Array Evaluator </summary>
<param name="fun"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.Prod">
<summary> product of rowvec instance. </summary>
<returns>double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.Min(System.Int32@)">
<summary> Minimum value from rowvec instance. </summary>
<param name="IndexOfMin">Index of Maximum element</param>
<returns>double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.Max(System.Int32@)">
<summary> Minimum value from rowvec instance. </summary>
<param name="IndexOfMin">Index of Maximum element</param>
<returns>double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.Hcart(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> Horizonatal Concartination of RowVec A and B </summary>
<param name="A">RowVec</param>
<param name="B">RowVec</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.Hcart(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec[])">
<summary> Horizonatal Concartination of RowVecs </summary>
<param name="A">Matrix</param>
<param name="B">Matrix</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.Transpose">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.Interp1(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec,System.Double)">
<summary> </summary>
<param name="X"/>
<param name="Y"/>
<param name="x"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.Interp1(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="X"/>
<param name="Y"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.LangInterp1(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec,System.Double)">
<summary> One dimensional langrange Interpolation </summary>
<param name="X"/>
<param name="Y"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.LangInterp1(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> One dimensional langrange Interpolation </summary>
<param name="X"/>
<param name="Y"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.CubicInterp1(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec,System.Double)">
<summary> One dimensional cubic Interpolation given the dydx </summary>
<param name="X"/>
<param name="Y"/>
<param name="dydx"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.CubicInterp1(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> One dimensional cubic Interpolation given the dydx </summary>
<param name="X"/>
<param name="Y"/>
<param name="dydx"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.Ones(System.Int32)">
<summary> </summary>
<param name="N"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.Max(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> Matrix of the maximum elements comparing matrix A and B </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.Min(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> Matrix of the minimum elements comparing matrix A and B </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.Rand(System.Int32)">
<summary> </summary>
<param name="M"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.Randi(System.Int32,System.Int32)">
<summary> </summary>
<param name="max"/>
<param name="M"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.Randi(System.Int32,System.Int32,System.Int32)">
<summary> </summary>
<param name="min"/>
<param name="max"/>
<param name="M"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Multiply(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.Matrix)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Multiply(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_UnaryNegation(CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Subtraction(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Subtraction(CypherCrescent.MathematicsLibrary.RowVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="b"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Subtraction(System.Double,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="b"/>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Addition(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Addition(CypherCrescent.MathematicsLibrary.RowVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="b"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Addition(System.Double,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="b"/>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Multiply(CypherCrescent.MathematicsLibrary.RowVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="b"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Multiply(System.Double,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="b"/>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Multiply(CypherCrescent.MathematicsLibrary.RowVec,System.Boolean[])">
<summary> </summary>
<param name="A"/>
<param name="b"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Multiply(System.Boolean[],CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="b"/>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Division(CypherCrescent.MathematicsLibrary.RowVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="b"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Division(System.Double,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="b"/>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Equality(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_Inequality(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_GreaterThan(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_GreaterThanOrEqual(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_LessThanOrEqual(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_LessThan(CypherCrescent.MathematicsLibrary.RowVec,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_GreaterThan(CypherCrescent.MathematicsLibrary.RowVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_GreaterThan(System.Double,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="B"/>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_LessThan(CypherCrescent.MathematicsLibrary.RowVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_LessThan(System.Double,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="B"/>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_GreaterThanOrEqual(CypherCrescent.MathematicsLibrary.RowVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_GreaterThanOrEqual(System.Double,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="B"/>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_LessThanOrEqual(CypherCrescent.MathematicsLibrary.RowVec,System.Double)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.RowVec.op_LessThanOrEqual(System.Double,CypherCrescent.MathematicsLibrary.RowVec)">
<summary> </summary>
<param name="B"/>
<param name="A"/>
<returns/>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Solvers">
<summary> Solvers is the class of solvers for mathematical problems such as: Root finding, Solution of linear and non linear systems. </summary>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Solvers.Set">
<summary> Contains Setting for the Solvers Proceedure </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Set.Alpha">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Set.StepFactor">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Set.UserDefinedJacobian">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Set.MaxIter">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Set.MaxFunEvals">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Set.HomotopySteps">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Set.RelTol">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Set.AbsTol">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Set.CheckInitialConvergence">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Set.RefineHomotopyEuler">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Set.Display">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Set.highaccuratediv">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Set.del">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Set.PreviousSolution">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Set.ReUseJacobian">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Set.XTol">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Set.FTol">
<summary> </summary>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Solvers.Result">
<summary> Holds the result of calls to the Solvers class. Implicitly convertes to the class of the expected result </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Result.Sol">
<summary> Holds the solution of the current problem </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Result.Iter">
<summary> Holds the number of iteration used in the computation </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Result.FunVal">
<summary> Holds the current value of the function at the exit of the computation </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Result.delF">
<summary> Holds the most resent change in function value </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Result.delx">
<summary> Holds the most resent change in variabale value </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Result.Jacobian">
<summary> Holds the current value of the Jacobian at the exit of the computation </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Result.JacobianInv">
<summary> Holds the current value of the Jacobian at the exit of the computation </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Result.FunEvals">
<summary> Holds the number of function evaluation used in the computation </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Result.IsConverged">
<summary> States whether the solution to the problem is converged or not </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Result.Message">
<summary> Summary of the status at exit </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Result.NumLinSol">
<summary> Number of Linear System Solved </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Result.NumLUDec">
<summary> Number of LU decomposition </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.Solvers.Result.NumPartDer">
<summary> Number of Partial Derivatives </summary>
</member>
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.Solvers.Result.#ctor"  -->
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Result.ToString">
<summary> Function returns OptimizerResults as a string </summary>
<returns>String from the array</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Result.op_Implicit(CypherCrescent.MathematicsLibrary.Solvers.Result)~CypherCrescent.MathematicsLibrary.ColVec">
<summary> Implicit operator for conversion from OptimizerResults to Matrix </summary>
<param name="value">Matrix to be converted to double array</param>
<returns>array of double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Result.op_Implicit(CypherCrescent.MathematicsLibrary.Solvers.Result)~System.Double">
<summary> Implicit operator for conversion from OptimizerResults to double </summary>
<param name="value">Matrix to be converted to double array</param>
<returns>array of double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Result.op_Implicit(CypherCrescent.MathematicsLibrary.Solvers.Result)~CypherCrescent.MathematicsLibrary.Complex">
<summary> Implicit operator for conversion from Result to double </summary>
<param name="value">Matrix to be converted to double array</param>
<returns>array of double</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.LinSolve(CypherCrescent.MathematicsLibrary.Matrix,CypherCrescent.MathematicsLibrary.Matrix)">
<summary> Solves System of Linear Equations 'Ax = b' for vector x </summary>
<param name="A">A Matrix oc coeficients</param>
<param name="b">Solution Vector</param>
<returns>returns a double satifying the equation 'Ax = b'</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Fzero(System.Func{System.Double,System.Double},System.Double,CypherCrescent.MathematicsLibrary.Solvers.Set)">
<summary> Solves for the root of a nonlinear function 'f(x) = 0' using Brent method </summary>
<param name="fun">Function takes a Matrix and returns a Matrix</param>
<param name="initialguess">double array Initial Guess bound</param>
<param name="guide">Optimization settings for the solution process</param>
<returns>returns a double satifying the equation 'f(x) = 0'</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Fzero(System.Func{System.Double,System.Double},System.Double[],CypherCrescent.MathematicsLibrary.Solvers.Set)">
<summary> Solves for the root of a nonlinear function 'f(x) = 0' using Brent method </summary>
<param name="fun">Function takes a Matrix and returns a Matrix</param>
<param name="initialguess">double array Initial Guess bound</param>
<param name="guide">Optimization settings for the solution process</param>
<returns>returns a double satifying the equation 'f(x) = 0'</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.KZeros(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)">
<summary> Finds a number of zeros of an eigenfunction used in the solution of a partial differential eqaution </summary>
<param name="fun"/>
<param name="xmin"/>
<param name="xmax"/>
<param name="N"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.FSolve(System.Func{System.Double,System.Double},System.Double,CypherCrescent.MathematicsLibrary.Solvers.Set)">
<summary> Solves for the root of a nonlinear function 'f(x) = 0' using Newton-Raphson's Method </summary>
<param name="fun">Function takes a double and returns function value and its derivative</param>
<param name="x0">double Initial Guess</param>
<param name="guide">Optimization settings for the solution process</param>
<returns>returns a Complex satifying the equation 'f(x) = 0'</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.FSolve(System.Func{CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex},CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Solvers.Set)">
<summary> Solves for the root of a nonlinear function 'f(x) = 0' using Newton-Raphson's Method </summary>
<param name="fun">Function takes a double and returns function value and its derivative</param>
<param name="x0">double Initial Guess</param>
<param name="guide">Optimization settings for the solution process</param>
<returns>returns a Complex satifying the equation 'f(x) = 0'</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.HouseHolderNfzero(System.Func{System.Double,System.Double},System.Double,System.Int32,CypherCrescent.MathematicsLibrary.Solvers.Set)">
<summary> Solves for the root of a nonlinear function 'f(x) = 0' using General HouseHolder's Method </summary>
<param name="fun">Function takes a double and returns a double</param>
<param name="x0">double Initial Guess</param>
<param name="N">Order of the solution (1 for Newton, 2 for Halley, 3 and 4 are accepted</param>
<param name="guide">Optimization settings for the solution process</param>
<returns>returns a double satifying the equation 'f(x) = 0'</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Bisectfzero(System.Func{System.Double,System.Double},System.Double,System.Double,CypherCrescent.MathematicsLibrary.Solvers.Set)">
<summary> Solves for the root of a nonlinear function 'f(x) = 0' using Bisection Method </summary>
<param name="fun">Function takes a double and returns a double</param>
<param name="a">lower bound of the search area</param>
<param name="b">upper bound of the search area</param>
<param name="guide">Optimization settings for the solution process</param>
<returns>returns a double satifying the equation 'f(x) = 0'</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.BrentFzero(System.Func{System.Double,System.Double},System.Double,System.Double,CypherCrescent.MathematicsLibrary.Solvers.Set)">
<summary> Brent Method called by fzero </summary>
<param name="fun"/>
<param name="x1">Lower bound of the search interval</param>
<param name="x2">Upper bound of the search interval</param>
<param name="guide">Optimization settings for the solution process</param>
<returns>returns a double satifying the equation 'f(x) = 0'</returns>
</member>
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.Solvers.Secantfzero(System.Func{System.Double,System.Double},System.Double,System.Double,CypherCrescent.MathematicsLibrary.Solvers.Set)"  -->
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.Solvers.Secantfzero(System.Func{System.Double,System.Double},System.Double,CypherCrescent.MathematicsLibrary.Solvers.Set)"  -->
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.FSolve(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Solvers.Set,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Solves for the Solution of a system of nonlinear equations 'f(x) = 0' using Newton-Raphson's Multivariate Method </summary>
<param name="fun">Function takes a Matrix and returns a Matrix</param>
<param name="x0">(double) Initial Guess</param>
<param name="guide">Optimization settings for the solution process</param>
<param name="lb">Lowerbound matrix</param>
<param name="ub">Upperbound matrix</param>
<returns>returns a double satifying the equation 'f(x) = 0'</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Homotopy(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Solvers.Set,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Solves for he Solution of a system of nonlinear equations 'f(x) = 0' using Method of Continuity </summary>
<param name="fun">Function takes a Matrix and returns a Matrix</param>
<param name="x0">(double) Initial Guess</param>
<param name="guide">Optimization settings for the solution process</param>
<param name="lb">Lowerbound matrix</param>
<param name="ub">Upperbound matrix</param>
<returns>returns a double satifying the equation 'f(x) = 0'</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.NewtonModified(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Solvers.Set,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Solves for the Solution of a system of nonlinear equations 'f(x) = 0' using Modified Newton-Raphson's Multivariate Method </summary>
<param name="fun">Function takes a Matrix and returns a Matrix</param>
<param name="x0">Column matrix of Initial Guess</param>
<param name="guide">Optimization settings for the solution process</param>
<returns>returns a Matrix satifying the equation 'f(x) = 0'</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Powell(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,System.Double,CypherCrescent.MathematicsLibrary.Solvers.Set,CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Solves for the Solution of a system of nonlinear equations 'f(x) = 0' using Powell's Hybrid Multivariate Method </summary>
<param name="fun">Function takes a Matrix and returns a Matrix</param>
<param name="x0">Column matrix of Initial Guess</param>
<param name="MaxStep">Maximum step length allowed</param>
<param name="guide">Solver setting</param>
<param name="lb">Lower bound</param>
<param name="ub">Upper bound</param>
<returns>returns a Matrix satifying the equation 'f(x) = 0'</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Broyden(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.Solvers.Set)">
<summary> Solves for the Solution of a system of nonlinear equations 'f(x) = 0' using Broyden's Multivariate Method </summary>
<param name="fun">Function takes a Matrix and returns a Matrix</param>
<param name="x0">Column matrix of Initial Guess</param>
<param name="guide">Optimization settings for the solution process</param>
<returns>returns a Matrix satifying the equation 'f(x) = 0'</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Grad(System.Func{CypherCrescent.MathematicsLibrary.ColVec,System.Double},CypherCrescent.MathematicsLibrary.ColVec)">
<summary> Returns the gradient of a scaler multivariate function with respect to its variable </summary>
<param name="fun">Multivariate Scaler function</param>
<param name="x">Column Matrix of varaible valuesat which the gradiate is to be computed</param>
<returns>Column Matrix of partial derivatives of the function with respect to the varaibles</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Jacobian(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> Returns a Matrix of gradient of a multivariate Vector function with respect to its variable </summary>
<param name="fun">Multivariate Vector function</param>
<param name="x">Column Matrix of varaible valuesat which the gradiate is to be computed</param>
<returns>Matrix of first order partial derivatives of the function with respect to the varaibles</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Jacobian(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec,System.Double,CypherCrescent.MathematicsLibrary.Solvers.Set)">
<summary> Returns a Matrix of gradient of a multivariate Vector function with respect to its variable </summary>
<param name="fun">Multivariate Vector function</param>
<param name="x">Column Vector of variable values at which the gradient is to be computed</param>
<param name="F">Column Vector of function values at x</param>
<param name="del">small pertubation factor used for the gradient</param>
<returns>Matrix of first order partial derivatives of the function with respect to the varaibles</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Diff2VecFun(System.Func{CypherCrescent.MathematicsLibrary.ColVec,CypherCrescent.MathematicsLibrary.ColVec},CypherCrescent.MathematicsLibrary.ColVec,System.Double)">
<summary> Returns a Matrix of gradient of a multivariate Vector function with respect to its variable </summary>
<param name="fun">Multivariate Vector function</param>
<param name="x">Column Matrix of varaible valuesat which the gradient is to be computed</param>
<returns>An order 3 tensor of second order partial derivatives of the function with respect to the varaibles</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Diff1(System.Func{System.Double,System.Double},System.Double,System.Boolean,System.Double)">
<summary> Returns the first order deraivative of a scaler function </summary>
<param name="fun">Univariate Scaler function</param>
<param name="X">varaible value at which the gradient is to be computed</param>
<param name="accuracyhigh">bool stating whether or not high accuracy diffferention method should be used</param>
<returns>double of derivative of the function with respect to the varaible</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Diff1(System.Func{CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex},CypherCrescent.MathematicsLibrary.Complex,System.Boolean,System.Double)">
<summary> Returns the first order deraivative of a scaler function </summary>
<param name="fun">Univariate Scaler function</param>
<param name="X">varaible value at which the gradiate is to be computed</param>
<param name="accuracyhigh">bool stating whether or not high accuracy diffferention method should be used</param>
<returns>double of derivative of the function with respect to the varaible</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.ForwardDiff1(System.Func{System.Double,System.Double},System.Double,System.Double)">
<summary> Returns the first order forward deraivative of a scaler function </summary>
<param name="fun">Univariate Scaler function</param>
<param name="X">varaible value at which the gradiate is to be computed</param>
<returns>double of derivative of the function with respect to the varaible</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Diff2(System.Func{System.Double,System.Double},System.Double,System.Boolean,System.Double)">
<summary> Returns the second order deraivative of a scaler function </summary>
<param name="fun">Univariate Scaler function</param>
<param name="X">varaible value at which the gradiate is to be computed</param>
<param name="accuracyhigh">bool stating whether or not high accuracy diffferention method should be used</param>
<returns>double of second order derivative of the function with respect to the varaible</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Diff3(System.Func{System.Double,System.Double},System.Double,System.Boolean,System.Double)">
<summary> Returns the third order deraivative of a scaler function </summary>
<param name="fun">Univariate Scaler function</param>
<param name="X">varaible value at which the gradiate is to be computed</param>
<param name="accuracyhigh">bool stating whether or not high accuracy diffferention method should be used</param>
<returns>double of third order derivative of the function with respect to the varaible</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Solvers.Diff4(System.Func{System.Double,System.Double},System.Double,System.Boolean,System.Double)">
<summary> Returns the fourth order deraivative of a scaler function </summary>
<param name="fun">Univariate Scaler function</param>
<param name="X">varaible value at which the gradiate is to be computed</param>
<param name="accuracyhigh">bool stating whether or not high accuracy diffferention method should be used</param>
<returns>double of fourth order derivative of the function with respect to the varaible</returns>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.SolversException">
<summary> Exception type for the solver class </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseColVec.#ctor(System.Double[])">
<summary> </summary>
<param name="entry"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseColVec.ArrayEval(System.Func{System.Double,System.Double})">
<summary> Array Evaluator </summary>
<param name="fun"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseColVec.Vcart(CypherCrescent.MathematicsLibrary.SparseColVec,CypherCrescent.MathematicsLibrary.SparseColVec)">
<summary> Vertical Concartination of SparseMatrix A and B </summary>
<param name="A">Matrix</param>
<param name="B">Matrix</param>
<returns>SparseMatrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseColVec.Full">
<summary> Full </summary>
<param name="fun"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseColVec.MultTW(CypherCrescent.MathematicsLibrary.SparseColVec,CypherCrescent.MathematicsLibrary.SparseColVec)">
<summary> Perfoms Termwise Multiplicaition of Matrices </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix </returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseColVec.MultTW(CypherCrescent.MathematicsLibrary.SparseColVec,System.Boolean[])">
<summary> Perfoms Termwise Multiplicaition of Matrices </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix </returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseColVec.MultTW(CypherCrescent.MathematicsLibrary.SparseColVec,CypherCrescent.MathematicsLibrary.SparseColVec,CypherCrescent.MathematicsLibrary.SparseColVec[])">
<summary> Termwise Multiplicaition of Matrices </summary>
<param name="A">SparseMatrix A</param>
<param name="B">SparseMatrix B</param>
<returns>Matrix </returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseColVec.DivTW(System.Double,CypherCrescent.MathematicsLibrary.SparseColVec)">
<summary> Perfoms Termwise Division of Matrices </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix </returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseColVec.DivTW(CypherCrescent.MathematicsLibrary.SparseColVec,System.Double)">
<summary> Perfoms Termwise Division of Matrices </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix </returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseColVec.DivTW(CypherCrescent.MathematicsLibrary.SparseColVec,CypherCrescent.MathematicsLibrary.SparseColVec)">
<summary> Perfoms Termwise Division of Matrices </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix </returns>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.SparseMatrix.CmprssdColFmt">
<summary> </summary>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.SparseMatrix.CmprssdRowFmt">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.LastSolver">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Rows">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Cols">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Numel">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Nnz">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.NumLUDecomposition">
<summary> Returns the number of times a Matrix object is decomposed into its LU factors </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.NumLinSysSolved">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.sparsity">
<summary> </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.L_lu">
<summary> Lower Triangular Matrix Generated by LU factorization methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.U_lu">
<summary> Upper Triangular Matrix Generated by LU factorization methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.L_chol">
<summary> Lower Triangular Matrix Generated by cholesky factorization methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.U_chol">
<summary> Upper Triangular Matrix Generated by cholesky factorization methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.U_svd">
<summary> Column Orthonormal Matrix Generated by SVD decomposition methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.S_svd">
<summary> A Diagonal Matrix Generated by SVD decomposition methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.V_svd">
<summary> Row Orthonormal Matrix Generated by SVD decomposition methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.U_bdr">
<summary> U Matrix Generated by BiDiagonal Reduction methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.B_bdr">
<summary> BiDiagonal Matrix Generated by BiDiagonal Reduction methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.V_bdr">
<summary> V Matrix Generated by BiDiagonal Reduction methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.U_tdr">
<summary> U Matrix Generated by TriDiagonal Reduction methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.T_tdr">
<summary> TriDiagonal Matrix Generated by TriDiagonal Reduction methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.V_tdr">
<summary> V Matrix Generated by TriDiagonal Reduction methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Q_qr">
<summary> Q Matrix Generated by QR factorization methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.R_qr">
<summary> R Matrix Generated by QR factorization methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.L_ldlt">
<summary> Lower Triangular Matrix Generated by LDL factorization methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.D_ldlt">
<summary> Diagonal Matrix Generated by LDL factorization methods </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.EigVals">
<summary> Matrix of EigenValues </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.EigVecs">
<summary> Matrix of EigenVectors </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Charpoly">
<summary> Array of Coefficient of Characteristics Polynomial </summary>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.T">
<summary> Transpose of a Matrix </summary>
</member>
<member name="F:CypherCrescent.MathematicsLibrary.SparseMatrix.pi">
<summary> Array of interger for permutation </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.#ctor(System.Double[0:,0:])">
<summary> </summary>
<param name="entry"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.#ctor(CypherCrescent.MathematicsLibrary.Matrix)">
<summary> </summary>
<param name="entry"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.op_Implicit(System.Double[0:,0:])~CypherCrescent.MathematicsLibrary.SparseMatrix">
<summary> </summary>
<param name="value"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.op_Implicit(System.Double)~CypherCrescent.MathematicsLibrary.SparseMatrix">
<summary> </summary>
<param name="value"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.op_Explicit(CypherCrescent.MathematicsLibrary.SparseMatrix)~System.Double">
<summary> </summary>
<param name="value"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.#ctor(System.Int32[],System.Int32[],System.Double[],System.Int32,System.Int32)">
<summary> </summary>
<param name="_rows"/>
<param name="_cols"/>
<param name="entry"/>
<param name="rows"/>
<param name="cols"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.#ctor(CypherCrescent.MathematicsLibrary.Indexer,CypherCrescent.MathematicsLibrary.Indexer,CypherCrescent.MathematicsLibrary.ColVec,System.Int32,System.Int32)">
<summary> </summary>
<param name="_rows"/>
<param name="_cols"/>
<param name="entry"/>
<param name="rows"/>
<param name="cols"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.#ctor(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
<summary> </summary>
<param name="_rows"/>
<param name="_cols"/>
<param name="entry"/>
<param name="rows"/>
<param name="cols"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.#ctor(System.Boolean[0:,0:])">
<summary> Matrix Class Constructor </summary>
<param name="entry">2D array of double</param>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.op_Implicit(System.Boolean[0:,0:])~CypherCrescent.MathematicsLibrary.SparseMatrix">
<summary> Implicit operator for conversion from bool [,] to matrix </summary>
<param name="x">bool [,] to be converted to Matrix</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.op_Implicit(System.Collections.Generic.List{CypherCrescent.MathematicsLibrary.ColVec})~CypherCrescent.MathematicsLibrary.SparseMatrix">
<summary> Implicit operator for conversion from List of ColVec to matrix </summary>
<param name="value">Matrix to be converted</param>
<returns>array of integers</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.op_Implicit(System.Collections.Generic.List{CypherCrescent.MathematicsLibrary.RowVec})~CypherCrescent.MathematicsLibrary.SparseMatrix">
<summary> Implicit operator for conversion from List of RowVec to matrix </summary>
<param name="value">Matrix to be converted</param>
<returns>array of integers</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.op_Implicit(System.Collections.Generic.List{CypherCrescent.MathematicsLibrary.SparseColVec})~CypherCrescent.MathematicsLibrary.SparseMatrix">
<summary> Implicit operator for conversion from List of SparseColVec to matrix </summary>
<param name="value">Matrix to be converted</param>
<returns>array of integers</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.op_Implicit(System.Collections.Generic.List{CypherCrescent.MathematicsLibrary.SparseRowVec})~CypherCrescent.MathematicsLibrary.SparseMatrix">
<summary> Implicit operator for conversion from List of SparseRowVec to matrix </summary>
<param name="value">Matrix to be converted</param>
<returns>array of integers</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetEnumerator">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Zeros(System.Int32,System.Int32)">
<summary> </summary>
<param name="N"/>
<param name="M"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Zeros(System.Int32)">
<summary> </summary>
<param name="N"/>
<param name="M"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Eye(System.Int32,System.Int32)">
<summary> </summary>
<param name="N"/>
<param name="M"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Eye(System.Int32)">
<summary> </summary>
<param name="N"/>
<param name="N"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.ToString">
<summary> Converts Matrix to String for Console WriteLine. </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetTranspose">
<summary> Transpose a Matrix. </summary>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Size">
<summary> Gets the size of a matrix. </summary>
<returns>Array of intergers containing the number of rows and columns of a matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Length">
<summary> Gets the size of a matrix. </summary>
<returns>larger of the two dimensions</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Size(System.Int32)">
<summary> Gets the size of a matrix. </summary>
<returns>number of element along a given dimenson of rows and columns of a matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.IsSquare">
<summary> Test of a matrix is square </summary>
<returns>bool</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.IsNaN">
<summary> Test for elements that is NaN </summary>
<returns>array of bool same saze as the matrix</returns>
</member>
<!--  Badly formed XML comment ignored for member "M:CypherCrescent.MathematicsLibrary.SparseMatrix.IsNotNaN"  -->
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.IsEmpty">
<summary> Test for Empty </summary>
<returns>array of bool same saze as the matrix</returns>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.IsUpTri">
<summary> Test to determine if the Matrix is upper triangular </summary>
<returns>bool</returns>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.IsLowTri">
<summary> Test to determine if the Matrix is lower triangular </summary>
<returns>bool</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Duplicate">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Triu(System.Int32)">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Tril(System.Int32)">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.IsDiag">
<summary> Test to determine if the Matrix is Diagonal </summary>
<returns>bool</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Diag(CypherCrescent.MathematicsLibrary.ColVec,System.Int32)">
<summary> Returns a column containing the diagonals of A if A ia a Matrix and returns a Matrix containg A as its diagonal if A is a column vector </summary>
<param name="A">Matrix or a column vector</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Diag(CypherCrescent.MathematicsLibrary.SparseColVec,System.Int32)">
<summary> Returns a column containing the diagonals of A if A ia a Matrix and returns a Matrix containg A as its diagonal if A is a column vector </summary>
<param name="A">Matrix or a column vector</param>
<param name="k">Displacement of the input from the main diagonal</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Diag(CypherCrescent.MathematicsLibrary.SparseMatrix,System.Int32)">
<summary> Returns a column containing the diagonals of A if A ia a Matrix and returns a Matrix containg A as its diagonal if A is a column vector </summary>
<param name="A">Matrix or a column vector</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.IsSymmetric">
<summary> Test to determine if the Matrix is Symmetric </summary>
<returns>bool</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.IsSkewSymmetric">
<summary> Test to determine if the Matrix is Symmetric </summary>
<returns>bool</returns>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.IsPosDef">
<summary> Test to determine if the Matrix is positve definite </summary>
<returns>bool</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Range">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Max(System.Double,CypherCrescent.MathematicsLibrary.SparseMatrix)">
<summary> Matrix of the maximum elements comparing matrix A and B </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Max(CypherCrescent.MathematicsLibrary.SparseMatrix,System.Double)">
<summary> Matrix of the maximum elements comparing matrix A and B </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Max(CypherCrescent.MathematicsLibrary.SparseMatrix,CypherCrescent.MathematicsLibrary.SparseMatrix)">
<summary> Matrix of the maximum elements comparing matrix A and B </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Min(System.Double,CypherCrescent.MathematicsLibrary.SparseMatrix)">
<summary> Matrix of the minimum elements comparing matrix A and B </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Min(CypherCrescent.MathematicsLibrary.SparseMatrix,System.Double)">
<summary> Matrix of the minimum elements comparing matrix A and B </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Min(CypherCrescent.MathematicsLibrary.SparseMatrix,CypherCrescent.MathematicsLibrary.SparseMatrix)">
<summary> Matrix of the minimum elements comparing matrix A and B </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix</returns>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Item(System.Int32,System.Int32)">
<summary> Access this matrix as a 2D array </summary>
<param name="iRow"/>
<param name="iCol"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Item(CypherCrescent.MathematicsLibrary.Indexer,CypherCrescent.MathematicsLibrary.Indexer)">
<summary> Access this matrix as a 2D array </summary>
<param name="iRow"/>
<param name="iCol"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Item(System.Int32)">
<summary> Access this matrix as a 1D array </summary>
<param name="i"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Item(CypherCrescent.MathematicsLibrary.Indexer)">
<summary> Access this matrix as a 2D array </summary>
<param name="I"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Item(System.Boolean[])">
<summary> Access this matrix as a 2D array </summary>
<param name="I"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Item(System.Boolean[0:,0:])">
<summary> Access this matrix as a 2D array </summary>
<param name="I"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Item(CypherCrescent.MathematicsLibrary.Indexer,System.Int32)">
<summary> Access this matrix as a 2D array </summary>
<param name="iRow"/>
<param name="iCol"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Item(System.String,System.Int32)">
<summary> Access this matrix as a 2D array </summary>
<param name="iRow"/>
<param name="iCol"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Item(System.Int32,CypherCrescent.MathematicsLibrary.Indexer)">
<summary> Access this matrix as a 2D array </summary>
<param name="iRow"/>
<param name="iCol"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Item(System.Int32,System.String)">
<summary> Access this matrix as a 2D array </summary>
<param name="iRow"/>
<param name="iCol"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Item(System.String,CypherCrescent.MathematicsLibrary.Indexer)">
<summary> Access this matrix as a 2D array </summary>
<param name="iRow"/>
<param name="iCol"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Item(CypherCrescent.MathematicsLibrary.Indexer,System.String)">
<summary> Access this matrix as a 2D array </summary>
<param name="iRow"/>
<param name="iCol"/>
<returns/>
</member>
<member name="P:CypherCrescent.MathematicsLibrary.SparseMatrix.Item(System.String)">
<summary> </summary>
<param name="I"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Add(CypherCrescent.MathematicsLibrary.SparseMatrix,CypherCrescent.MathematicsLibrary.SparseMatrix)">
<summary> </summary>
<param name="A"/>
<param name="B"/>
<returns/>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.MultTW(CypherCrescent.MathematicsLibrary.SparseMatrix,CypherCrescent.MathematicsLibrary.SparseMatrix)">
<summary> Perfoms Termwise Multiplicaition of Matrices </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix </returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.MultTW(CypherCrescent.MathematicsLibrary.SparseMatrix,System.Boolean[0:,0:])">
<summary> Perfoms Termwise Multiplicaition of Matrices </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix </returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.MultTW(CypherCrescent.MathematicsLibrary.SparseMatrix,CypherCrescent.MathematicsLibrary.SparseMatrix,CypherCrescent.MathematicsLibrary.SparseMatrix[])">
<summary> Termwise Multiplicaition of Matrices </summary>
<param name="A">SparseMatrix A</param>
<param name="B">SparseMatrix B</param>
<returns>Matrix </returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.DivTW(System.Double,CypherCrescent.MathematicsLibrary.SparseMatrix)">
<summary> Perfoms Termwise Division of Matrices </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix </returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.DivTW(CypherCrescent.MathematicsLibrary.SparseMatrix,System.Double)">
<summary> Performs Termwise Division of Matrices </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix </returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.DivTW(CypherCrescent.MathematicsLibrary.SparseMatrix,CypherCrescent.MathematicsLibrary.SparseMatrix)">
<summary> Performs Termwise Division of Matrices </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix </returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Vcart(CypherCrescent.MathematicsLibrary.SparseMatrix,CypherCrescent.MathematicsLibrary.SparseMatrix)">
<summary> Vertical Concartination of SparseMatrix A and B </summary>
<param name="A">Matrix</param>
<param name="B">Matrix</param>
<returns>SparseMatrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Vcart(CypherCrescent.MathematicsLibrary.SparseMatrix,CypherCrescent.MathematicsLibrary.SparseMatrix,CypherCrescent.MathematicsLibrary.SparseMatrix[])">
<summary> Vertical Concartination of SparseMatrix A and B </summary>
<param name="A">SparseMatrix</param>
<param name="B">SparseMatrix</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Hcart(CypherCrescent.MathematicsLibrary.SparseMatrix,CypherCrescent.MathematicsLibrary.SparseMatrix)">
<summary> Vertical Concartination of Matrix A and B </summary>
<param name="A">Matrix</param>
<param name="B">Matrix</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Hcart(CypherCrescent.MathematicsLibrary.SparseMatrix,CypherCrescent.MathematicsLibrary.SparseMatrix,CypherCrescent.MathematicsLibrary.SparseMatrix[])">
<summary> Vertical Concartination of SparseMatrix A and B </summary>
<param name="A">SparseMatrix</param>
<param name="B">SparseMatrix</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Mat2Vec(CypherCrescent.MathematicsLibrary.SparseMatrix)">
<summary> Converts a matrix to a vector. </summary>
<param name="A">Matrix to be converted</param>
<returns>Vector</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Vec2Mat(CypherCrescent.MathematicsLibrary.SparseColVec,System.Int32)">
<summary> Converts from vector to matrix </summary>
<param name="A">Matrix to be converted</param>
<param name="cols">number of colums</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Reshape(CypherCrescent.MathematicsLibrary.SparseMatrix,System.Int32,System.Int32)">
<summary> The reshape function returns a new array with n rows and m columns (n*m must equal the number of elements in the original array). The new array has the same elements as the original </summary>
<param name="A">Matrix to be reshaped</param>
<param name="rows">number of rows</param>
<param name="cols">number of columns</param>
<returns>a new array with n rows and m columns</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Fliplr">
<summary> Flip an instance Matrix laterally. </summary>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Flipud">
<summary> Flip an instance Matrix Vertically. </summary>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Repmat(CypherCrescent.MathematicsLibrary.SparseMatrix,System.Int32,System.Int32)">
<summary> specifies a list of scalars, I,J, that describes how copies of A are arranged in each dimension. When A has 2 dimensions, the size of B is size(A).*[I,J]. For example, repmat(new Matrix(new double[,]{{1 2}, {3 4}}),2,3) returns a 4-by-6 matrix. </summary>
<param name="A">Matrix</param>
<param name="I">int</param>
<param name="J">int</param>
<returns>Matrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Norm(System.Double)">
<summary> </summary>
<param name="n"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.ArrayEval(System.Func{System.Double,System.Double})">
<summary> Array Evaluator </summary>
<param name="fun"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Full">
<summary> Full </summary>
<param name="fun"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.SwapRows(System.Int32,System.Int32)">
<summary> Swap a two specified rows. </summary>
<param name="M">Row 1</param>
<param name="N">Row 2</param>
<returns>Void</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.SwapCols(System.Int32,System.Int32)">
<summary> Swap a two specified columns. </summary>
<param name="M">Row 1</param>
<param name="N">Row 2</param>
<returns>Void</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Rref(System.Double)">
<summary> Returns the reduced row echelon form of the instance of a SparseMatrix, its pivot columns, and basis of its null space </summary>
<param name="tol">specifies a pivot tolerance that the algorithm uses to determine negligible columns.</param>
<returns>Reduced Row Echelon Form R, Pivot P, basis of Null Space N </returns>
<example> SparseMatrix A = new double[,] { {16, 0, 0, 13 }, { 5, 11, 5, 8 }, { 9, 0, 0, 12 }, { 4, 0, 0, 0 }}; (SparseMatrix Ra, Indexer Pa, SparseMatrix Na) = A.Rref(); Console.WriteLine("Ra = \n" + Ra); Console.WriteLine("Pa = \n" + Pa); Console.WriteLine("Na = \n" + Na); </example>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.MakeLU">
<summary> Function for LU decomposition </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.MakeiLU">
<summary> Function for Incomplete LU decomposition </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetL_lu">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetU_lu">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.MakeChol">
<summary> Cholesky Decomposition </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.MakeiChol">
<summary> Incomplete Cholesky Decomposition </summary>
<exception cref="T:System.Exception"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetL_chol">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetU_chol">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.MakeSVD(System.Int32)">
<summary> Single Value Decomposition </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetU_svd">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetS_svd">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetV_svd">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.HouseHolder(CypherCrescent.MathematicsLibrary.SparseColVec,System.Int32)">
<summary> </summary>
<param name="b"/>
<param name="k"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.BiDiagReduce">
<summary> BiDiagonal Reduction </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetU_bdr">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetB_bdr">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetV_bdr">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.TriDiagReduce">
<summary> TriDiagonal Reduction </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetU_tdr">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetT_tdr">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetV_tdr">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.MakeQR">
<summary> Function for QR decomposition </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetQ_qr">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetR_qr">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.MakeLDLT">
<summary> </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetD_ldl">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.GetL_ldl">
<summary> </summary>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Symamd(CypherCrescent.MathematicsLibrary.SparseMatrix)">
<summary> </summary>
<param name="A"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Solve(CypherCrescent.MathematicsLibrary.SparseMatrix,CypherCrescent.MathematicsLibrary.Matrix)">
<summary> Solve with </summary>
<param name="A"/>
<param name="b"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.ForwardSubs(CypherCrescent.MathematicsLibrary.SparseMatrix,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="L"/>
<param name="b"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.BackSubs(CypherCrescent.MathematicsLibrary.SparseMatrix,CypherCrescent.MathematicsLibrary.ColVec)">
<summary> </summary>
<param name="U"/>
<param name="b"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseMatrix.Wilkinson(System.Int32)">
<summary> </summary>
<param name="N"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseRowVec.#ctor(System.Double[])">
<summary> </summary>
<param name="entry"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseRowVec.ArrayEval(System.Func{System.Double,System.Double})">
<summary> Array Evaluator </summary>
<param name="fun"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseRowVec.Hcart(CypherCrescent.MathematicsLibrary.SparseRowVec,CypherCrescent.MathematicsLibrary.SparseRowVec)">
<summary> Vertical Concartination of SparseMatrix A and B </summary>
<param name="A">Matrix</param>
<param name="B">Matrix</param>
<returns>SparseMatrix</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseRowVec.Full">
<summary> Full </summary>
<param name="fun"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseRowVec.DivTW(System.Double,CypherCrescent.MathematicsLibrary.SparseRowVec)">
<summary> Perfoms Termwise Division of Matrices </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix </returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseRowVec.DivTW(CypherCrescent.MathematicsLibrary.SparseRowVec,System.Double)">
<summary> Perfoms Termwise Division of Matrices </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix </returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseRowVec.DivTW(CypherCrescent.MathematicsLibrary.SparseRowVec,CypherCrescent.MathematicsLibrary.SparseRowVec)">
<summary> Perfoms Termwise Division of Matrices </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix </returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseRowVec.MultTW(CypherCrescent.MathematicsLibrary.SparseRowVec,CypherCrescent.MathematicsLibrary.SparseRowVec,CypherCrescent.MathematicsLibrary.SparseRowVec[])">
<summary> Termwise Multiplicaition of Matrices </summary>
<param name="A">SparseMatrix A</param>
<param name="B">SparseMatrix B</param>
<returns>Matrix </returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SparseRowVec.MultTW(CypherCrescent.MathematicsLibrary.SparseRowVec,System.Boolean[])">
<summary> Perfoms Termwise Multiplicaition of Matrices </summary>
<param name="A">Matrix A</param>
<param name="B">Matrix B</param>
<returns>Matrix </returns>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.SpecialFunctions">
<summary> Handles all computaton invloving special functions </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.BesselJ(System.Int32,System.Double)">
<summary> BesselJ computes the bessel function of the first kind for order n and argument x; </summary>
<param name="n">Order of Bessel Function</param>
<param name="x">value of argument for which Bessel Function is to be computed</param>
<returns>J_n(x)</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.BesselJ(System.Int32,CypherCrescent.MathematicsLibrary.Complex)">
<summary> BesselJ computes the bessel function of the first kind for order n and argument x; </summary>
<param name="n">Order of Bessel Function</param>
<param name="x">value of argument for which Bessel Function is to be computed</param>
<returns>J_n(x)</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.BesselY(System.Int32,System.Double)">
<summary> BesselY computes the bessel function of the second kind for order n and argument x; </summary>
<param name="n">Order of Bessel Function</param>
<param name="x">value of argument for which Bessel Function is to be computed</param>
<returns>Y_n(x)</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.BesselY(System.Int32,CypherCrescent.MathematicsLibrary.Complex)">
<summary> BesselY computes the bessel function of the second kind for order n and argument x; </summary>
<param name="n">Order of Bessel Function</param>
<param name="x">value of argument for which Bessel Function is to be computed</param>
<returns>Y_n(x)</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.BesselI(System.Int32,System.Double)">
<summary> BesselI computes the modified bessel function of the first kind for order n and argument x; </summary>
<param name="n">Order of Bessel Function</param>
<param name="x">value of argument for which Bessel Function is to be computed</param>
<returns>I_n(x)</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.BesselI(System.Int32,CypherCrescent.MathematicsLibrary.Complex)">
<summary> BesselI computes the modified bessel function of the first kind for order n and argument x; </summary>
<param name="n">Order of Bessel Function</param>
<param name="x">value of argument for which Bessel Function is to be computed</param>
<returns>I_n(x)</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.BesselK(System.Int32,System.Double)">
<summary> BesselK computes the modified bessel function of the second kind for order n and argument x; </summary>
<param name="n">Order of Bessel Function</param>
<param name="x">value of argument for which Bessel Function is to be computed</param>
<returns>K_n(x)</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.BesselK(System.Int32,CypherCrescent.MathematicsLibrary.Complex)">
<summary> BesselK computes the modified bessel function of the second kind for order n and argument x; </summary>
<param name="n">Order of Bessel Function</param>
<param name="x">value of argument for which Bessel Function is to be computed</param>
<returns>K_n(x)</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.BesselJ(System.Double,System.Double)">
<summary> </summary>
<param name="n"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.BesselY(System.Double,System.Double)">
<summary> </summary>
<param name="n"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.LnGamma(System.Double)">
<summary> Returns the value ln[Γ(xx)] for xx>0. </summary>
<param name="xx">value of argument for which LnGamma is to be computed</param>
<returns>ln[Γ(xx)]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.LnGamma(CypherCrescent.MathematicsLibrary.Complex)">
<summary> Returns the value ln[Γ(zz)] for zz>0. </summary>
<param name="zz">value of argument for which LnGamma is to be computed</param>
<returns>ln[Γ(zz)]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Gamma(System.Double)">
<summary> Returns the value Γ(x). </summary>
<param name="x">value of argument for which Gamma is to be computed</param>
<returns>Γ(x)</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.DiGamma(System.Double)">
<summary> Returns the value Γ(x). </summary>
<param name="x">value of argument for which Gamma is to be computed</param>
<returns>Γ(x)</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Gamma(CypherCrescent.MathematicsLibrary.Complex)">
<summary> Returns the value Γ(z). </summary>
<param name="z">value of argument for which Gamma is to be computed</param>
<returns>Γ(z)</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.GammaP(System.Double,System.Double)">
<summary> Returns the value Γ_p(a,x). </summary>
<param name="a">value of argument for which Upper Incomplete Gamma is to be computed</param>
<param name="x">start of integration</param>
<returns>Γ_p(a,x)</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.GammaQ(System.Double,System.Double)">
<summary> Returns the value Γ_q(a,x). </summary>
<param name="a">value of argument for which Lower Incomplete Gamma is to be computed</param>
<param name="x">end of integration</param>
<returns>Γ_p(a,x)</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.InvGammaP(System.Double,System.Double)">
<summary> Returns the value Γ_p^-1(p, a). </summary>
<param name="a">value of argument for which Upper Incomplete Gamma is to be computed</param>
<param name="x">start of integration</param>
<returns>Γ_p^-1(p, a)</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.HeavisideTheta(System.Double,System.Double)">
<summary> </summary>
<param name="t"/>
<param name="a"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Erf(System.Double)">
<summary> Error Function </summary>
<param name="x">value of argument for which the error function is to be computed</param>
<returns>Erf[x]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Erf(CypherCrescent.MathematicsLibrary.Complex)">
<summary> Error Function </summary>
<param name="x">value of complex argument for which the error function is to be computed</param>
<returns>Erf[x]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.InvErf(System.Double)">
<summary> Error Function </summary>
<param name="x">value of argument for which the error function is to be computed</param>
<returns>Erf[x]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Erfc(System.Double)">
<summary> Complemetary Error Function </summary>
<param name="x">value of argument for which the complemetary error function is to be computed</param>
<returns>Erfc[x]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Erfc(CypherCrescent.MathematicsLibrary.Complex)">
<summary> Complemetary Error Function </summary>
<param name="x">value of complex argument for which the complemetary error function is to be computed</param>
<returns>Erfc[x]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Zeta(System.Double)">
<summary> Zeta Function </summary>
<param name="x">value of argument for which the zeta function is to be computed</param>
<returns>Z[x]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Zeta(CypherCrescent.MathematicsLibrary.Complex)">
<summary> Zeta Function </summary>
<param name="x">value of argument for which the zeta function is to be computed</param>
<returns>Z[x]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Beta(System.Double,System.Double)">
<summary> Beta Function </summary>
<param name="a">value of the first argument of the beta function</param>
<param name="b">value of the second argument of the beta function</param>
<returns>B[a,b]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Beta(CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex)">
<summary> Beta Function </summary>
<param name="a">value of the first argument of the beta function</param>
<param name="b">value of the second argument of the beta function</param>
<returns>B[a,b]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.IncBeta(System.Double,System.Double,System.Double)">
<summary> Incomplete Beta Function </summary>
<param name="a">value of the first argument of the beta function</param>
<param name="b">value of the second argument of the beta function</param>
<returns>B[a, b, x]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.InvIncBeta(System.Double,System.Double,System.Double)">
<summary> Inverse Incomplete Beta Function </summary>
<param name="a">value of the first argument of the beta function</param>
<param name="b">value of the second argument of the beta function</param>
<returns>B^-1[p, a, b]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Factorial(System.Int32)">
<summary> x! </summary>
<param name="x">value of argument for which factorial is to be computed</param>
<returns>x!</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.ExpInt(System.Int32,System.Double)">
<summary> Exponential Integral(It is defined as a definite integral of the ratio between an exponential function and powers of its argument.) </summary>
<param name="n">power of the exponential argument</param>
<param name="x">lower limit of integration</param>
<returns>ExpInt_n[x]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.ExpInt(System.Double)">
<summary> Exponential Integral(It is defined as a definite integral of the ratio between an exponential function and powers of its argument.) </summary>
<param name="n">power of the exponential argument</param>
<param name="x">lower limit of integration</param>
<returns>ExpInt_n[x]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.ExpInt(CypherCrescent.MathematicsLibrary.Complex)">
<summary> Exponential Integral(It is defined as a definite integral of the ratio between an exponential function and powers of its argument.) </summary>
<param name="n">power of the exponential argument</param>
<param name="x">lower limit of integration</param>
<returns>ExpInt_n[x]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.EI(System.Double)">
<summary> Exponential Integral(It is defined as a definite integral of the ratio between an exponential function and its argument.) </summary>
<param name="x">Negative of lower limit of integration</param>
<returns>EI[x] = -ExpInt[-x]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.SI(System.Double)">
<summary> Sine Integral(It is defined as a definite integral of the ratio between an sine function and its argument.) </summary>
<param name="x">Lower limit of integration</param>
<returns>SI[x]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.CI(System.Double)">
<summary> Cosine Integral(It is defined as a definite integral of the ratio between an cosine function and its argument.) </summary>
<param name="x">Lower limit of integration</param>
<returns>CI[x]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.FresnelS(System.Double)">
<summary> Fresnel Integral (It is defined as a definite integral of sine of square of its argument.) </summary>
<param name="x">Upper limit of the integration</param>
<returns>S[x]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.FresnelC(System.Double)">
<summary> Fresnel Integral (It is defined as a definite integral of cosine of square of its argument.) </summary>
<param name="x">Upper limit of the integration</param>
<returns>C[x]</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.EllipticF(System.Double,System.Double)">
<summary> </summary>
<param name="phi"/>
<param name="k"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.EllipticK(System.Double)">
<summary> </summary>
<param name="k"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.EllipticE(System.Double,System.Double)">
<summary> </summary>
<param name="phi"/>
<param name="k"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.EllipticE(System.Double)">
<summary> </summary>
<param name="k"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.EllipticPi(System.Double,System.Double,System.Double)">
<summary> </summary>
<param name="phi"/>
<param name="n"/>
<param name="k"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.EllipticPi(System.Double,System.Double)">
<summary> </summary>
<param name="n"/>
<param name="k"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Ber(System.Double)">
<summary> </summary>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Bei(System.Double)">
<summary> </summary>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Ker(System.Double)">
<summary> </summary>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Kei(System.Double)">
<summary> </summary>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.LambertW(System.Double,System.Double)">
<summary> </summary>
<param name="n"/>
<param name="z"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Laguerre(System.Int32,System.Double)">
<summary> </summary>
<param name="n"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Laguerre(System.Int32,CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="n"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Hermite(System.Int32,System.Double)">
<summary> </summary>
<param name="n"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Hermite(System.Int32,CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="n"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.ChebyshevT(System.Int32,System.Double)">
<summary> </summary>
<param name="n"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.ChebyshevT(System.Int32,CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="n"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.ChebyshevU(System.Int32,System.Double)">
<summary> </summary>
<param name="n"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.ChebyshevU(System.Int32,CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="n"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Legendre(System.Int32,System.Double)">
<summary> </summary>
<param name="n"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.SpecialFunctions.Legendre(System.Int32,CypherCrescent.MathematicsLibrary.Complex)">
<summary> </summary>
<param name="n"/>
<param name="x"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Tensor`1.GetLength(System.Int32)">
<summary> </summary>
<param name="k"/>
<returns/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Tensor`1.GetEnumerator">
<summary> </summary>
<returns/>
<exception cref="T:System.NotImplementedException"/>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Tensor`1.System#Collections#IEnumerable#GetEnumerator">
<summary> </summary>
<returns/>
<exception cref="T:System.NotImplementedException"/>
</member>
<member name="T:CypherCrescent.MathematicsLibrary.Transform">
<summary> Performs Numerical Transform of functions </summary>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Transform.LaplaceTransform(System.Func{System.Double,System.Double},System.Double)">
<summary> Returns Numerical Laplace Transform of a given function fun(t) at s </summary>
<param name="fun">function fun(s) in laplace space</param>
<param name="s">double s in s space</param>
<returns>returns a double LaplaceTransform(fun(t))=>(s)</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Transform.LaplaceTransform(System.Func{System.Double,System.Double},CypherCrescent.MathematicsLibrary.Matrix)">
<summary> Returns Numerical Laplace Transform of a given function fun(t) at s </summary>
<param name="fun">function fun(s) in laplace space</param>
<param name="s">Matrix s in s space</param>
<returns>returns a Matrix LaplaceTransform(fun(t))=>(s)</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Transform.InverseLaplaceGavSteh(System.Func{System.Double,System.Double},System.Double,System.Int32)">
<summary> Returns Numerical Laplace Inversion of a given function fun at a time t, using L series of stehfest terms </summary>
<param name="fun">function fun(s) in laplace space</param>
<param name="t">double t in time space</param>
<param name="L">Number of the stefest terms to be used (use any of 8,10,12,14,16)</param>
<returns>returns a double Iverselaplace(fun)(t)'</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Transform.InverseLaplaceGavSteh(System.Func{System.Double,System.Double},CypherCrescent.MathematicsLibrary.Matrix,System.Int32)">
<summary> Returns Numerical Laplace Inversion of a given function fun at a time t, using L series of stehfest terms </summary>
<param name="fun">function fun(s) in laplace space</param>
<param name="t">double t in time space</param>
<param name="L">Number of the stefest terms to be used (use any of 8,10,12,14,16)</param>
<returns>returns a Matrix Iverselaplace(fun)(t)'</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Transform.InverseLaplaceTalbot(System.Func{CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex},System.Double,System.Int32)">
<summary> Laplace inversion </summary>
<param name="LaplaceFun">Function in Laplace space to be inverted</param>
<param name="t">Time at which value of the inverse function is to be computed</param>
<param name="M">Number of terms to be used in the inversion (64 is good for periodic functions)</param>
<returns>double value of the ivnerted function at the given time</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Transform.InverseLaplaceTalbot(System.Func{CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex},CypherCrescent.MathematicsLibrary.Matrix,System.Int32)">
<summary> Laplace inversion </summary>
<param name="LaplaceFun">Function in Laplace space to be inverted</param>
<param name="t">Matrix of time at which value of the inverse function is to be computed</param>
<param name="M">Number of terms to be used in the inversion (64 is good for periodic functions)</param>
<returns>Matrix of values of inverted function at the given time</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Transform.InverseLaplaceEuler(System.Func{CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex},System.Double,System.Int32)">
<summary> Laplace inversion </summary>
<param name="LaplaceFun">Function in Laplace space to be inverted</param>
<param name="t">Time at which value of the inverse function is to be computed</param>
<param name="M">Number of terms to be used in the inversion (32 is good for periodic functions)</param>
<returns>double value of the ivnerted function at the given time</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Transform.InverseLaplaceEuler(System.Func{CypherCrescent.MathematicsLibrary.Complex,CypherCrescent.MathematicsLibrary.Complex},CypherCrescent.MathematicsLibrary.Matrix,System.Int32)">
<summary> Laplace inversion </summary>
<param name="LaplaceFun">Function in Laplace space to be inverted</param>
<param name="t">Matrix of time at which value of the inverse function is to be computed</param>
<param name="M">Number of terms to be used in the inversion (32 is good for periodic functions)</param>
<returns>Matrix of values of inverted function at the given time</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Transform.LaplaceConvolution(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double)">
<summary> Performs Laplace transform convolution between two functions </summary>
<param name="Fun1">First function to be convoluted</param>
<param name="Fun2">Second function to be convoluted</param>
<param name="t">value t at which the convolution is to be computed</param>
<returns>Value of the convolution at t</returns>
</member>
<member name="M:CypherCrescent.MathematicsLibrary.Transform.FourierConvolution(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double)">
<summary> Performs Fourier transform convolution between two functions </summary>
<param name="Fun1">First function to be convoluted</param>
<param name="Fun2">Second function to be convoluted</param>
<param name="t">value t at which the convolution is to be computed</param>
<returns>Value of the convolution at t</returns>
</member>
<member name="M:Highs.HighsSolver.getInfo">
<summary> Gets the current solution info. </summary>
<returns>
The
<see cref="T:Highs.SolutionInfo"/>
.
</returns>
</member>
<member name="T:Highs.SolutionInfo">
<summary> The solution info. </summary>
</member>
<member name="P:Highs.SolutionInfo.SimplexIterationCount">
<summary> Gets or sets the simplex iteration count. </summary>
</member>
<member name="P:Highs.SolutionInfo.QpIterationCount">
<summary> Gets or sets the QuadProgram iteration count. </summary>
</member>
<member name="P:Highs.SolutionInfo.IpmIterationCount">
<summary> Gets or sets the Interior Point Method (IPM) iteration count. </summary>
</member>
<member name="P:Highs.SolutionInfo.PdlpIterationCount">
<summary> Gets or sets the PDLP iteration count. </summary>
</member>
<member name="P:Highs.SolutionInfo.MipGap">
<summary> Gets or sets the MIP gap. </summary>
</member>
<member name="P:Highs.SolutionInfo.DualBound">
<summary> Gets or sets the best dual bound. </summary>
</member>
<member name="P:Highs.SolutionInfo.NodeCount">
<summary> Gets or sets the MIP node count. </summary>
</member>
<member name="P:Highs.SolutionInfo.ObjectiveValue">
<summary> Gets or sets the objective value. </summary>
</member>
</members>
</doc>