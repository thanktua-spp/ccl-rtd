Advanced Engineering Applications
=================================

In this chapter we present pratical engineering problems solved with combinations of concept discussed under linear algebra, optimization, ordinary differential equations, numerical laplace inversion and special functions

Dimensionless Water Influx Estimation
-------------------------------------

Specific Heat Capacity of Natural Gas
-------------------------------------

Compressibility of Natural Gas
------------------------------

Howarth's Transformation
------------------------

Pleades System
---------------

Baton Mechanics
---------------

One Transistor Amplifier
------------------------
This example shows how to solve a stiff differential algebraic equation (DAE) that describes an electrical circuit. The one-transistor amplifier problem can be rewritten in semi-explicit form, but this example solves it in its original form :math:`Mu=\varphi(u)` The problem includes a constant, singular mass matrix :math:`M`.

The transistor amplifier circuit contains six resistors, three capacitors, and a transistor.

.. figure:: images/Transistor.png
         :align: center
         :alt: Transistor.png


.. tabs::

   .. tab:: CCL-Math
      CCL-Math Implementation

      .. code-block:: C#
         
         // import libraries
         using CypherCrescent.MathematicsLibrary;
         using static MathsChart.Chart;

         double pi = PI, Ub = 6, R0 = 1000, R15 = 9000, alpha = 0.99,
         beta = 1e-6, Uf = 0.026, c1 = 1e-6, c2 = 2e-6, c3 = 3e-6;
         Matrix Mass(double t, ColVec y) =>
            new double[,] { {-c1,  c1,  0,   0,   0 },
                            { c1, -c1,  0,   0,   0 },
                            { 0,   0,  -c2,  0,   0 },
                            { 0,   0,   0,  -c3,  c3},
                            { 0,   0,   0,   c3, -c3} };
        
        ColVec dudt(double t, ColVec u)
        {
            double[] du;
            double Ue = 0.4 * Sin(200 * pi * t),
                   f23 = beta * (Exp((u[1] - u[2]) / Uf) - 1);
            double[] du = [ -(Ue - u[0])/R0,
                          -(Ub/R15 - u[1]*2/R15 - (1-alpha)*f23),
                          -(f23 - u[2]/R15),
                          -((Ub - u[3])/R15 - alpha*f23),
                           u[4]/R15 ];
            return du;
        }
        double[] tspan = [0, 0.1];
        double[] y0 = [0, Ub / 2, Ub / 2, Ub, 0];
        
        Ode.Set options = new() { Stats = true, RelTol = 1e-3, MassType = Ode.MassType.Constant };
        
        var TY = Ode.Dae12(dudt, Mass, y0, tspan, options);
        Console.WriteLine(TY.Statistics);
        
        ColVec X = TY.X, U5 = TY.Y["", 4];
        var plt = Scatter(X, 0.4 * Maths.Sin(200 * pi * X), "o");
        plt.AddPlot(X, U5, "--r");
        plt.Legend = new()
        {
            labels = ["Input", "Output"],
            alignment = "upperleft"
        };
        plt.XLabel = "Time t";
        plt.YLabel = "Solution y";
        plt.Title = "One Transistor Amplifier DAE Problem-DAE12";
        plt.SaveFig("One Transistor Amplifier DAE Problem-DAE12.png");
        plt.Show();
        

      .. figure:: images/Solving-with-CCLMath-Ode23.png
         :align: center
         :alt: Solving-with-CCLMath-Ode23.png
     

   .. tab:: Python

      Python Implementation

      .. code-block:: python

         import numpy as np
         from scipy.integrate import solve_ivp
         import matplotlib.pyplot as plt
         
         # define function
         def dydt(t, y):
           a = 0.25
           return 2 * (a - t) * y **2;
         
         
         # set initial condition
         y0 = [15.9]
         
         # set time span
         t_span = [0, 1] 
         
         # call the solver
         sol = solve_ivp(dydt, t_span, y0)
                     
         # display the result
         plt.plot(sol.t, sol.y[0],  marker='o', linestyle='-')
         plt.xlabel('Time (t)')
         plt.ylabel('y(t)')
         plt.title('Solving-with-Python-Ode23')
         plt.savefig('Solving-with-Python-Ode23.png') 
         plt.show()

      .. figure:: images/Solving-with-Python-Ode23.png
         :align: center
         :alt: Solving-with-Python-Ode23.png


   .. tab:: Matlab

      Matlab Implementation

      .. code-block:: matlab

         % define the function handle
         a = 0.25;
         dydt = @(t,y) 2*(a - t)*y^2;
         
         % set initial condition
         y0 = 15.9;
         
         % set time span
         t_span = [0, 1];
         
         % call the solver
         [T, Y] = ode23(dydt, t_span, y0);
         
         % display the result
         plot(T, Y, '-o');
         xlabel('t')
         ylabel('y')
         title('Solving-with-Matlab-Ode23')
         saveas(gcf, 'Solving-with-Matlab-Ode23', 'png')

      .. figure:: images/Solving-with-Matlab-Ode23.png
         :align: center
         :alt: Solving-with-Matlab-Ode23.png
